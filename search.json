[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrie de Vries. Author, maintainer. Joris Meys. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"de Vries , Meys J (2022). rfordummies: Code Examples Accompany Book \"R Dummies\". https://rfordummies.com, https://rfordummies.github.io/rfordummies/.","code":"@Manual{,   title = {rfordummies: Code Examples to Accompany the Book \"R for Dummies\"},   author = {Andrie {de Vries} and Joris Meys},   year = {2022},   note = {https://rfordummies.com, https://rfordummies.github.io/rfordummies/}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Code Examples to Accompany the Book ","text":"rfordummies R package accompany book “R Dummies”, Andrie de Vries Joris Meys. package contains functions print table contents well code samples every chapter. print table contents, use: print code example chapters, use: ch1() - prints code examples ch1 ch2() - prints code examples ch2 … ch20() - prints code examples ch20 Since functions ch1() ch20() also contains code examples function examples, can following run examples given chapter:","code":"toc() example(\"ch20\", \"rfordummies\")"},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Code Examples to Accompany the Book ","text":"can install rfordummies using:","code":"library(\"devtools\") install_github(\"rfordummies\", \"andrie\")"},{"path":"/reference/ch01.html","id":null,"dir":"Reference","previous_headings":"","what":"Print examples of chapter 1 of 'R for Dummies'. — ch01","title":"Print examples of chapter 1 of 'R for Dummies'. — ch01","text":"print listing examples chapter, use ch1(). run examples ch1(), use example(ch1).","code":""},{"path":"/reference/ch01.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print examples of chapter 1 of 'R for Dummies'. — ch01","text":"","code":"ch01()  ch1()"},{"path":[]},{"path":"/reference/ch01.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print examples of chapter 1 of 'R for Dummies'. — ch01","text":"","code":"# Chapter 1 - Introducing R: The Big Picture  # Recognizing the Benefits of Using R  ## It comes as free, open-source code  ### It runs anywhere  ### It supports extensions  ### It provides an engaged community  ### It connects with other languages   # Looking At Some of the Unique Features of R  ## Performing multiple calculations with vectors  x <- 1:5 x #> [1] 1 2 3 4 5 x + 2 #> [1] 3 4 5 6 7 x + 6:10 #> [1]  7  9 11 13 15  ## Processing more than just statistics  ## Running code without a compiler"},{"path":"/reference/ch02.html","id":null,"dir":"Reference","previous_headings":"","what":"Print examples of chapter 2 of 'R for Dummies'. — ch02","title":"Print examples of chapter 2 of 'R for Dummies'. — ch02","text":"print listing examples chapter, use ch2(). run examples ch2(), use example(ch2).","code":""},{"path":"/reference/ch02.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print examples of chapter 2 of 'R for Dummies'. — ch02","text":"","code":"ch02()  ch2()"},{"path":[]},{"path":"/reference/ch02.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print examples of chapter 2 of 'R for Dummies'. — ch02","text":"","code":"# Chapter 2 - Exploring R  # Working with a Code Editor  ## Exploring RGui  ### Seeing the naked R console   ### Issuing a simple command  24+7+11 #> [1] 42  ### Closing the console  if (FALSE) { quit() }   ## Dressing up with RStudio   # Starting Your First R Session  ## Saying hello to the world  print(\"Hello world!\") #> [1] \"Hello world!\"  ## Doing simple math  1+2+3+4+5 #> [1] 15  ## Using vectors   c(1,2,3,4,5) #> [1] 1 2 3 4 5 1:5 #> [1] 1 2 3 4 5 sum(1:5) #> [1] 15  ## Storing and calculating values  x <- 1:5 x #> [1] 1 2 3 4 5  y <- 10 x + y #> [1] 11 12 13 14 15  x #> [1] 1 2 3 4 5 y #> [1] 10  z <- x + y z #> [1] 11 12 13 14 15  h <- \"Hello\" h #> [1] \"Hello\"  hw <- c(\"Hello\", \"world!\") hw #> [1] \"Hello\"  \"world!\"  paste(\"Hello\", \"world!\") #> [1] \"Hello world!\"  ## Talking back to the user  h <- \"Hello\" if(interactive()){ yourname <- readline(\"What is your name?\") } else {   yourname <- \"Joris\" } paste(h, yourname) #> [1] \"Hello Joris\"  # Sourcing a Script  h <- \"Hello\" yourname <- readline(\"What is your name?\") #> What is your name? print(paste(h, yourname)) #> [1] \"Hello \"   ### Finding help on functions ?paste help(paste)  # Navigating the Workspace ls() #> [1] \"h\"        \"hw\"       \"x\"        \"y\"        \"yourname\" \"z\"         ## Manipulating the content of the workspace  rm(z) ls() #> [1] \"h\"        \"hw\"       \"x\"        \"y\"        \"yourname\"  ##Saving your work  getwd() #> [1] \"/tmp/Rtmp1ZL64K/file32dd29eeecf2/reference\"  filename <- file.path(tempdir(), \"yourname.rda\") if (FALSE) { save(yourname, file=filename) } list.files(tempdir(), pattern = \".rda\") #> character(0)  ## Retrieving your work   rm(yourname) if (FALSE) { load(\"yourname.rda\") }"},{"path":"/reference/ch03.html","id":null,"dir":"Reference","previous_headings":"","what":"Print examples of chapter 3 of 'R for Dummies'. — ch03","title":"Print examples of chapter 3 of 'R for Dummies'. — ch03","text":"print listing examples chapter, use ch3(). run examples ch3(), use example(ch3).","code":""},{"path":"/reference/ch03.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print examples of chapter 3 of 'R for Dummies'. — ch03","text":"","code":"ch03()  ch3()"},{"path":[]},{"path":"/reference/ch03.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print examples of chapter 3 of 'R for Dummies'. — ch03","text":"","code":"# Chapter 3 - The Fundamentals of R  # Using the Full Power of Functions  ## Vectorizing your functions  baskets.of.Granny <- c(12,4,4,6,9,3) baskets.of.Granny #> [1] 12  4  4  6  9  3 sum(baskets.of.Granny) #> [1] 38  firstnames <- c(\"Joris\", \"Carolien\", \"Koen\") lastname <- \"Meys\" paste(firstnames,lastname) #> [1] \"Joris Meys\"    \"Carolien Meys\" \"Koen Meys\"      authors <- c(\"Andrie\",\"Joris\") lastnames <- c(\"de Vries\",\"Meys\") paste(authors,lastnames) #> [1] \"Andrie de Vries\" \"Joris Meys\"       ## Putting the argument in a function  # print() ### This line of code leads to deliberate error for illustration print(x = \"Isn't this fun?\") #> [1] \"Isn't this fun?\"  print(digits=4, x = 11/7) #> [1] 1.571  # Making history  filename <- file.path(tempdir(), \"Chapter3.Rhistory\") if (FALSE) { savehistory(file = filename) } list.files(tempdir(), pattern = \".Rhistory\") #> character(0) if (FALSE) { loadhistory(file.path(tempdir(), \"Chapter3.Rhistory\")) }  # Keeping Your Code Readable  ## Following naming conventions  ## Choosing a clear name  paste <- paste(\"This gets\",\"confusing\") paste #> [1] \"This gets confusing\" paste(\"Don't\",\"you\",\"think?\") #> [1] \"Don't you think?\"  ## Choosing a naming style  ## Structuring your code  baskets.of.Geraldine <- c(5,3,2,2,12,9) Intro <- \"It is amazing! The All Star Grannies scored a total of\"  Outro <- \"baskets in the last six games!\"  Total.baskets <- baskets.of.Granny +                baskets.of.Geraldine  Text <- paste(Intro,               sum(Total.baskets),               Outro) cat(Text) #> It is amazing! The All Star Grannies scored #> a total of 71 baskets in the last six games! Text #> [1] \"It is amazing! The All Star Grannies scored\\na total of 71 baskets in the last six games!\"  cat('If you doubt whether it works, + just try it out.') #> If you doubt whether it works, #> + just try it out.  ## Adding comments  # The All Star Grannies do it again! baskets.of.Granny <- c(12,4,4,6,9,3) # Granny rules sum(baskets.of.Granny) # total number of points #> [1] 38   # Getting from Base R to More  ## Finding packages  ## Installing packages  if (FALSE) { install.packages(\"fortunes\") }  library(\"fortunes\") fortune(\"This is R\") #>  #> Evelyn Hall: I would like to know how (if) I can extract some of the #> information from the summary of my nlme. #> Simon Blomberg: This is R. There is no if. Only how. #>    -- Evelyn Hall and Simon 'Yoda' Blomberg #>       R-help (April 2005) #>  fortune(161) #>  #> (3 times...rrrrgh...) and why do you think the mailing list is called #> R-*packages* ??????????? #> Please do #>   for(i in 1:20) cat(\"It's a package!\\n\") #>    -- Martin Maechler (after a newly released *package* has been called #>       *library* three times in its announcement on R-packages) #>       R-help (March 2006) #>  detach(package:fortunes)"},{"path":"/reference/ch04.html","id":null,"dir":"Reference","previous_headings":"","what":"Print examples of chapter 4 of 'R for Dummies'. — ch04","title":"Print examples of chapter 4 of 'R for Dummies'. — ch04","text":"print listing examples chapter, use ch4(). run examples ch4(), use example(ch4).","code":""},{"path":"/reference/ch04.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print examples of chapter 4 of 'R for Dummies'. — ch04","text":"","code":"ch04()  ch4()"},{"path":[]},{"path":"/reference/ch04.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print examples of chapter 4 of 'R for Dummies'. — ch04","text":"","code":"# Chapter 4 - Getting Started with Arithmetic  # Working with Numbers, Infinity, and Missing Values  ## Doing basic arithmetic  ### Using arithmetic operators   baskets.of.Granny <- c(12,4,4,6,9,3) baskets.of.Geraldine <- c(5,3,2,2,12,9)   Granny.money <- baskets.of.Granny * 120 Geraldine.money <- baskets.of.Geraldine * 145   Granny.money + Geraldine.money #> [1] 2165  915  770 1010 2820 1665   baskets.of.Granny * 120 + baskets.of.Geraldine * 145 #> [1] 2165  915  770 1010 2820 1665  ### Controlling the order of the operations 4 + 2 * 3 #> [1] 10 (4 + 2)* 3 #> [1] 18  ## Using mathematical functions  ### Calculating logarithms and exponentials  log(1:3) #> [1] 0.0000000 0.6931472 1.0986123 log(1:3,base=6) #> [1] 0.0000000 0.3868528 0.6131472  x <- log(1:3) exp(x) #> [1] 1 2 3  ### Putting the science in scientific notation 1.33e4 #> [1] 13300  4.12e-2 #> [1] 0.0412  1.2e6 / 2e3 #> [1] 600   ### Rounding numbers  round(123.456,digits=2) #> [1] 123.46 round(-123.456,digits=-2) #> [1] -100 signif(-123.456,digits=4) #> [1] -123.5  ### Using trigonometric functions  cos(120) #> [1] 0.814181 cos(120*pi/180) #> [1] -0.5  ## Calculating whole vectors  `+`(2,3) #> [1] 5   ##To infinity and beyond  ### Using infinity  2/0 #> [1] Inf 4 - Inf #> [1] -Inf is.finite(10^(305:310)) #> [1]  TRUE  TRUE  TRUE  TRUE FALSE FALSE  ### Dealing with undefined outcomes Inf / Inf #> [1] NaN NaN + 4 #> [1] NaN   ### Dealing with missing values  x <- NA x + 4 #> [1] NA  log(x) #> [1] NA  is.na(x) #> [1] TRUE  ### Calculating infinite, undefined, and missing values   # Organizing Data in Vectors  ## Discovering the properties of vectors  ### Looking at the structure of a vector  str(baskets.of.Granny) #>  num [1:6] 12 4 4 6 9 3 length(baskets.of.Granny) #> [1] 6 authors <- c(\"Andrie\", \"Joris\") str(authors) #>  chr [1:2] \"Andrie\" \"Joris\"  ### Testing vector types     is.numeric(baskets.of.Granny) #> [1] TRUE is.integer(baskets.of.Granny) #> [1] FALSE  x <- c(4L,6L) is.integer(x) #> [1] TRUE  ## Creating vectors  seq(from = 4.5, to = 2.5, by = -0.5) #> [1] 4.5 4.0 3.5 3.0 2.5   seq(from = -2.7, to = 1.3, length.out = 9) #> [1] -2.7 -2.2 -1.7 -1.2 -0.7 -0.2  0.3  0.8  1.3   baskets.of.Granny <- c(12,4,4,6,9,3) baskets.of.Geraldine <- c(5,3,2,2,12,9)  ## Combining vectors  all.baskets <-c(baskets.of.Granny, baskets.of.Geraldine) all.baskets #>  [1] 12  4  4  6  9  3  5  3  2  2 12  9  ## Repeating vectors rep(c(0, 0, 7), times = 3) #> [1] 0 0 7 0 0 7 0 0 7 rep(c(2, 4, 2), each = 3) #> [1] 2 2 2 4 4 4 2 2 2 rep(c(0, 7), times = c(4,2)) #> [1] 0 0 0 0 7 7 rep(1:3,length.out=7) #> [1] 1 2 3 1 2 3 1  # Getting Values in and out of Vectors  ## Understanding indexing in R  numbers <- 30:1 numbers #>  [1] 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10  9  8  7  6 #> [26]  5  4  3  2  1  ## Extracting values from a vector  numbers[5] #> [1] 26 numbers[c(5,11,3)] #> [1] 26 20 28  indices <- c(5,11,3) numbers[indices] #> [1] 26 20 28 numbers[-3] #>  [1] 30 29 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5 #> [26]  4  3  2  1 numbers[-(1:20)] #>  [1] 10  9  8  7  6  5  4  3  2  1 # numbers[-1:20] # NOT RUN, gives error   ## Changing values in a vector   baskets.of.Granny[3] <- 5 baskets.of.Granny #> [1] 12  4  5  6  9  3  baskets.of.Geraldine[c(2,4)] <- 4 baskets.of.Geraldine #> [1]  5  4  2  4 12  9  Granny.copy <- baskets.of.Granny  baskets.of.Granny[4] <- 11 baskets.of.Granny #> [1] 12  4  5 11  9  3  baskets.of.Granny <- Granny.copy baskets.of.Granny #> [1] 12  4  5  6  9  3  # Working with Logical Vectors  ## Comparing values  baskets.of.Granny > 5 #> [1]  TRUE FALSE FALSE  TRUE  TRUE FALSE which(baskets.of.Granny > 5) #> [1] 1 4 5  the.best <- baskets.of.Geraldine < baskets.of.Granny which(the.best) #> [1] 1 3 4    ## Using logical vectors as indices  baskets.of.Granny[the.best] #> [1] 12  5  6 x <- c(3, 6, 1, NA, 2) x[x > 2] #> [1]  3  6 NA x > 2 #> [1]  TRUE  TRUE FALSE    NA FALSE  ## Combining logical statements  min.baskets <- baskets.of.Granny == min(baskets.of.Granny) max.baskets <- baskets.of.Granny == max(baskets.of.Granny) min.baskets | max.baskets #> [1]  TRUE FALSE FALSE FALSE FALSE  TRUE  x[!is.na(x)] #> [1] 3 6 1 2  ## Summarizing logical vectors   sum(the.best) #> [1] 3 any(the.best) #> [1] TRUE all(the.best) #> [1] FALSE     # Powering Up Your Math with Vector Functions   ## Using arithmetic vector operations  ### Summarizing a vector min(baskets.of.Granny) #> [1] 3  max(baskets.of.Granny) #> [1] 12 sum(baskets.of.Granny,baskets.of.Geraldine) #> [1] 75    x <- c(3,6,2,NA,1) sum(x) #> [1] NA sum(x,na.rm=TRUE) #> [1] 12  ### Cumulating operations  cumsum(baskets.of.Granny) #> [1] 12 16 21 27 36 39 cummax(baskets.of.Geraldine) #> [1]  5  5  5  5 12 12 cummin(x) #> [1]  3  3  2 NA NA  ### Calculating differences  diff(baskets.of.Granny) #> [1] -8  1  1  3 -6 diff(x) #> [1]  3 -4 NA NA  ## Recycling arguments  Granny.pointers <- c(10,2,4,0,4,1,4,2,7,2,1,2) points <- Granny.pointers * c(2,3) points #>  [1] 20  6  8  0  8  3  8  6 14  6  2  6 sum(points) #> [1] 87  sum(Granny.pointers * c(2,3)) #> [1] 87  round(diff(baskets.of.Granny) / baskets.of.Granny[1:5] * 100) #> [1] -67  25  20  50 -67"},{"path":"/reference/ch05.html","id":null,"dir":"Reference","previous_headings":"","what":"Print examples of chapter 5 of 'R for Dummies'. — ch05","title":"Print examples of chapter 5 of 'R for Dummies'. — ch05","text":"print listing examples chapter, use ch5(). run examples ch5(), use example(ch5).","code":""},{"path":"/reference/ch05.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print examples of chapter 5 of 'R for Dummies'. — ch05","text":"","code":"ch05()  ch5()"},{"path":[]},{"path":"/reference/ch05.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print examples of chapter 5 of 'R for Dummies'. — ch05","text":"","code":"# Chapter 5 - Getting Started with Reading and Writing  # Using Character Vectors for Text Data  ## Assigning a value to a character vector  x <- \"Hello world!\" is.character(x) #> [1] TRUE length(x) #> [1] 1 nchar(x) #> [1] 12  ## Creating a character vector with more than one element  x <- c(\"Hello\", \"world!\") length(x) #> [1] 2 nchar(x) #> [1] 5 6  ## Extracting a subset of a vector  letters #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" #> [20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\" LETTERS #>  [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\" #> [20] \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\" letters[10] #> [1] \"j\" LETTERS[24:26] #> [1] \"X\" \"Y\" \"Z\" tail(LETTERS, 5) #> [1] \"V\" \"W\" \"X\" \"Y\" \"Z\" head(letters, 10) #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"  ## Naming the values in your vectors  ### Looking at how named vectors work  str(islands) #>  Named num [1:48] 11506 5500 16988 2968 16 ... #>  - attr(*, \"names\")= chr [1:48] \"Africa\" \"Antarctica\" \"Asia\" \"Australia\" ... islands[c(\"Asia\", \"Africa\", \"Antarctica\")] #>       Asia     Africa Antarctica  #>      16988      11506       5500  names(islands)[1:9] #> [1] \"Africa\"       \"Antarctica\"   \"Asia\"         \"Australia\"    \"Axel Heiberg\" #> [6] \"Baffin\"       \"Banks\"        \"Borneo\"       \"Britain\"      names(sort(islands, decreasing=TRUE)[1:6]) #> [1] \"Asia\"          \"Africa\"        \"North America\" \"South America\" #> [5] \"Antarctica\"    \"Europe\"         ## Creating and assigning named vectors  month.days <- c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31) names(month.days) <- month.name month.days #>   January  February     March     April       May      June      July    August  #>        31        28        31        30        31        30        31        31  #> September   October  November  December  #>        30        31        30        31  names(month.days[month.days==31]) #> [1] \"January\"  \"March\"    \"May\"      \"July\"     \"August\"   \"October\"  \"December\"  # Manipulating Text  ## String theory: Combining and splitting strings  ### Splitting text  pangram <- \"The quick brown fox jumps over the lazy dog\" pangram #> [1] \"The quick brown fox jumps over the lazy dog\" strsplit(pangram, \" \") #> [[1]] #> [1] \"The\"   \"quick\" \"brown\" \"fox\"   \"jumps\" \"over\"  \"the\"   \"lazy\"  \"dog\"   #>   words <- strsplit(pangram, \" \")[[1]] words #> [1] \"The\"   \"quick\" \"brown\" \"fox\"   \"jumps\" \"over\"  \"the\"   \"lazy\"  \"dog\"    ### Changing text case  unique(tolower(words)) #> [1] \"the\"   \"quick\" \"brown\" \"fox\"   \"jumps\" \"over\"  \"lazy\"  \"dog\"   toupper(words[c(4, 9)]) #> [1] \"FOX\" \"DOG\" tolower(\"Some TEXT in Mixed CASE\") #> [1] \"some text in mixed case\"  ### Concatenating text  paste(\"The\", \"quick\", \"brown\", \"fox\") #> [1] \"The quick brown fox\" paste(c(\"The\", \"quick\", \"brown\", \"fox\")) #> [1] \"The\"   \"quick\" \"brown\" \"fox\"   paste(words, collapse=\" \") #> [1] \"The quick brown fox jumps over the lazy dog\" paste(words, collapse=\"_\") #> [1] \"The_quick_brown_fox_jumps_over_the_lazy_dog\" paste(LETTERS[1:5], 1:5, sep=\"_\", collapse=\"---\") #> [1] \"A_1---B_2---C_3---D_4---E_5\" paste(\"Sample\", 1:5) #> [1] \"Sample 1\" \"Sample 2\" \"Sample 3\" \"Sample 4\" \"Sample 5\" paste(c(\"A\", \"B\"), c(1, 2, 3, 4), sep=\"-\") #> [1] \"A-1\" \"B-2\" \"A-3\" \"B-4\" paste(c(\"A\"), c(1, 2, 3, 4, 5), sep=\"-\") #> [1] \"A-1\" \"A-2\" \"A-3\" \"A-4\" \"A-5\"  ## Sorting text  sort(letters, decreasing=TRUE) #>  [1] \"z\" \"y\" \"x\" \"w\" \"v\" \"u\" \"t\" \"s\" \"r\" \"q\" \"p\" \"o\" \"n\" \"m\" \"l\" \"k\" \"j\" \"i\" \"h\" #> [20] \"g\" \"f\" \"e\" \"d\" \"c\" \"b\" \"a\" sort(words) #> [1] \"The\"   \"brown\" \"dog\"   \"fox\"   \"jumps\" \"lazy\"  \"over\"  \"quick\" \"the\"    ## Finding text inside text  ### Searching for individual words  head(state.name) #> [1] \"Alabama\"    \"Alaska\"     \"Arizona\"    \"Arkansas\"   \"California\" #> [6] \"Colorado\"    ### Searching by position  head(substr(state.name, start=3, stop=6)) #> [1] \"abam\" \"aska\" \"izon\" \"kans\" \"lifo\" \"lora\"  ### Searching by pattern  grep(\"New\", state.name) #> [1] 29 30 31 32 state.name[29] #> [1] \"New Hampshire\" state.name[grep(\"New\", state.name)] #> [1] \"New Hampshire\" \"New Jersey\"    \"New Mexico\"    \"New York\"      state.name[grep(\"new\", state.name)] #> character(0)  ### Searching for multiple words  state.name[grep(\" \", state.name)] #>  [1] \"New Hampshire\"  \"New Jersey\"     \"New Mexico\"     \"New York\"       #>  [5] \"North Carolina\" \"North Dakota\"   \"Rhode Island\"   \"South Carolina\" #>  [9] \"South Dakota\"   \"West Virginia\"  state.name[grep(\"East\", state.name)] #> character(0)  ## Substituting text   gsub(\"cheap\", \"sheep's\", \"A wolf in cheap clothing\") #> [1] \"A wolf in sheep's clothing\" x <- c(\"file_a.csv\", \"file_b.csv\", \"file_c.csv\") y <- gsub(\"file_\", \"\", x) y #> [1] \"a.csv\" \"b.csv\" \"c.csv\" gsub(\".csv\", \"\", y) #> [1] \"a\" \"b\" \"c\"   #### Extending text functionality with stringr  if (FALSE) { install.packages(\"stringr\") } library(stringr)   ## Revving up with regular expressions  rwords <- c(\"bach\", \"back\", \"beech\", \"beach\", \"black\") grep(\"beach|beech\", rwords) #> [1] 3 4 rwords[grep(\"beach|beech\", rwords)] #> [1] \"beech\" \"beach\" rwords[grep(\"be(a|e)ch\", rwords)] #> [1] \"beech\" \"beach\" rwords[grep(\"b(e*|a*)ch\", rwords)] #> [1] \"bach\"  \"beech\"   # Factoring in Factors  ## Creating a factor  directions <- c(\"North\", \"East\", \"South\", \"South\") factor(directions) #> [1] North East  South South #> Levels: East North South factor(directions, levels= c(\"North\", \"East\", \"South\", \"West\")) #> [1] North East  South South #> Levels: North East South West factor(directions, levels= c(\"North\", \"East\", \"South\", \"West\"), labels=c(\"N\", \"E\", \"S\", \"W\")) #> [1] N E S S #> Levels: N E S W  ## Converting a factor  directions <- c(\"North\", \"East\", \"South\", \"South\") directions.factor <- factor(directions) directions.factor #> [1] North East  South South #> Levels: East North South as.character(directions.factor) #> [1] \"North\" \"East\"  \"South\" \"South\" as.numeric(directions.factor) #> [1] 2 1 3 3  numbers <- factor(c(9, 8, 10, 8, 9)) as.character(numbers) #> [1] \"9\"  \"8\"  \"10\" \"8\"  \"9\"  as.numeric(numbers) #> [1] 2 1 3 1 2 as.numeric(as.character(numbers)) #> [1]  9  8 10  8  9  ## Looking at levels  str(state.region) #>  Factor w/ 4 levels \"Northeast\",\"South\",..: 2 4 4 2 4 4 1 2 2 2 ... levels(state.region) #> [1] \"Northeast\"     \"South\"         \"North Central\" \"West\"          levels(state.region) <- c(\"NE\", \"S\", \"NC\", \"W\") head(state.region) #> [1] S W W S W W #> Levels: NE S NC W nlevels(state.region) #> [1] 4 length(levels(state.region)) #> [1] 4 levels(state.region)[2:3] #> [1] \"S\"  \"NC\"  ## Distinguishing data types  head(state.region) #> [1] S W W S W W #> Levels: NE S NC W table(state.region) #> state.region #> NE  S NC  W  #>  9 16 12 13  state.region #>  [1] S  W  W  S  W  W  NE S  S  S  W  W  NC NC NC NC S  S  NE S  NE NC NC S  NC #> [26] W  NC W  NE NE W  NE S  NC NC S  W  NE NE S  NC S  S  W  NE S  W  S  NC W  #> Levels: NE S NC W  ## Working with ordered factors  status <- c(\"Lo\", \"Hi\", \"Med\", \"Med\", \"Hi\") ordered.status <- factor(status, levels=c(\"Lo\", \"Med\", \"Hi\"), ordered=TRUE) ordered.status #> [1] Lo  Hi  Med Med Hi  #> Levels: Lo < Med < Hi table(status) #> status #>  Hi  Lo Med  #>   2   1   2  table(ordered.status) #> ordered.status #>  Lo Med  Hi  #>   1   2   2"},{"path":"/reference/ch06.html","id":null,"dir":"Reference","previous_headings":"","what":"Print examples of chapter 6 of 'R for Dummies'. — ch06","title":"Print examples of chapter 6 of 'R for Dummies'. — ch06","text":"print listing examples chapter, use ch6(). run examples ch6(), use example(ch6).","code":""},{"path":"/reference/ch06.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print examples of chapter 6 of 'R for Dummies'. — ch06","text":"","code":"ch06()  ch6()"},{"path":[]},{"path":"/reference/ch06.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print examples of chapter 6 of 'R for Dummies'. — ch06","text":"","code":"# Chapter 6 - Going on a Date with R  # Working with Dates  xd <- as.Date(\"2012-07-27\") xd #> [1] \"2012-07-27\" str(xd) #>  Date[1:1], format: \"2012-07-27\" weekdays(xd) #> [1] \"Friday\" xd + 7 #> [1] \"2012-08-03\" xd + 0:6 #> [1] \"2012-07-27\" \"2012-07-28\" \"2012-07-29\" \"2012-07-30\" \"2012-07-31\" #> [6] \"2012-08-01\" \"2012-08-02\" weekdays(xd + 0:6) #> [1] \"Friday\"    \"Saturday\"  \"Sunday\"    \"Monday\"    \"Tuesday\"   \"Wednesday\" #> [7] \"Thursday\"   startDate <- as.Date(\"2012-01-01\") xm <- seq(startDate, by=\"2 months\", length.out=6) xm #> [1] \"2012-01-01\" \"2012-03-01\" \"2012-05-01\" \"2012-07-01\" \"2012-09-01\" #> [6] \"2012-11-01\"  months(xm) #> [1] \"January\"   \"March\"     \"May\"       \"July\"      \"September\" \"November\"  quarters(xm) #> [1] \"Q1\" \"Q1\" \"Q2\" \"Q3\" \"Q3\" \"Q4\"  Sys.localeconv() #>     decimal_point     thousands_sep          grouping   int_curr_symbol  #>               \".\"                \"\"                \"\"                \"\"  #>   currency_symbol mon_decimal_point mon_thousands_sep      mon_grouping  #>                \"\"               \".\"                \"\"                \"\"  #>     positive_sign     negative_sign   int_frac_digits       frac_digits  #>                \"\"                \"\"             \"127\"             \"127\"  #>     p_cs_precedes    p_sep_by_space     n_cs_precedes    n_sep_by_space  #>             \"127\"             \"127\"             \"127\"             \"127\"  #>       p_sign_posn       n_sign_posn  #>             \"127\"             \"127\"   as.Date(\"27 July 2012\", format=\"%d %B %Y\") #> [1] \"2012-07-27\"  as.Date(\"27/7/12\", format=\"%d/%m/%y\") #> [1] \"2012-07-27\"  # Adding Time Information to Dates  apollo <- \"July 20, 1969, 20:17:39\" apollo.fmt <- \"%B %d, %Y, %H:%M:%S\" xct <- as.POSIXct(apollo, format=apollo.fmt, tz=\"UTC\") xct <- as.POSIXct(apollo, format=apollo.fmt) xct #> [1] \"1969-07-20 20:17:39 UTC\"  format(xct, \"%d/%m/%y\") #> [1] \"20/07/69\" format(xct, \"%S minutes past %I %p, on %d %B %Y\") #> [1] \"39 minutes past 08 PM, on 20 July 1969\"  # Performing Operations on Dates and Times  ## Addition and subtraction  24*60*60 #> [1] 86400 xct + 7*86400 #> [1] \"1969-07-27 20:17:39 UTC\" xct + 3*60*60 #> [1] \"1969-07-20 23:17:39 UTC\" xct - 7*86400 #> [1] \"1969-07-13 20:17:39 UTC\" as.Date(xct) - 7 #> [1] \"1969-07-13\"  ## Comparison of dates  Sys.time() #> [1] \"2022-02-22 12:02:21 UTC\" Sys.time() < xct #> [1] FALSE  dec.start <- as.POSIXct(\"1950-01-01\") dec <- seq(dec.start, by=\"10 years\", length.out=4) dec #> [1] \"1950-01-01 UTC\" \"1960-01-01 UTC\" \"1970-01-01 UTC\" \"1980-01-01 UTC\" dec > xct #> [1] FALSE FALSE  TRUE  TRUE  ## Extraction  xlt <- as.POSIXlt(xct) xlt #> [1] \"1969-07-20 20:17:39 UTC\" xlt$year #> [1] 69 xlt$mon #> [1] 6 unclass(xlt) #> $sec #> [1] 39 #>  #> $min #> [1] 17 #>  #> $hour #> [1] 20 #>  #> $mday #> [1] 20 #>  #> $mon #> [1] 6 #>  #> $year #> [1] 69 #>  #> $wday #> [1] 0 #>  #> $yday #> [1] 200 #>  #> $isdst #> [1] 0 #>  #> attr(,\"tzone\") #> [1] \"UTC\""},{"path":"/reference/ch07.html","id":null,"dir":"Reference","previous_headings":"","what":"Print examples of chapter 7 of 'R for Dummies'. — ch07","title":"Print examples of chapter 7 of 'R for Dummies'. — ch07","text":"print listing examples chapter, use ch7(). run examples ch7(), use example(ch7).","code":""},{"path":"/reference/ch07.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print examples of chapter 7 of 'R for Dummies'. — ch07","text":"","code":"ch07()  ch7()"},{"path":[]},{"path":"/reference/ch07.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print examples of chapter 7 of 'R for Dummies'. — ch07","text":"","code":"# Chapter 7 # Working in More Dimensions  # Adding a Second Dimension  ## Discovering a new dimension  ### Creating your first matrix  first.matrix <- matrix(1:12, ncol=4) first.matrix #>      [,1] [,2] [,3] [,4] #> [1,]    1    4    7   10 #> [2,]    2    5    8   11 #> [3,]    3    6    9   12 matrix(1:12, ncol=4, byrow=TRUE) #>      [,1] [,2] [,3] [,4] #> [1,]    1    2    3    4 #> [2,]    5    6    7    8 #> [3,]    9   10   11   12  ### Looking at the properties  str(first.matrix) #>  int [1:3, 1:4] 1 2 3 4 5 6 7 8 9 10 ... dim(first.matrix) #> [1] 3 4 length(first.matrix) #> [1] 12 my.array <- array(1:24, dim=c(3,4,2)) baskets.of.Granny <- c(12,4,5,6,9,3) baskets.of.Geraldine <- c(5,4,2,4,12,9) baskets.team <- rbind(baskets.of.Granny, baskets.of.Geraldine)  attributes(my.array) #> $dim #> [1] 3 4 2 #>  attr(baskets.team,'season') <- '2010-2011' attr(baskets.team,'season') #> [1] \"2010-2011\" attr(baskets.team,'season') <- NULL  ## Combining vectors into a matrix  baskets.of.Granny <- c(12,4,5,6,9,3) baskets.of.Geraldine <- c(5,4,2,4,12,9) baskets.team <- rbind(baskets.of.Granny, baskets.of.Geraldine)  baskets.team #>                      [,1] [,2] [,3] [,4] [,5] [,6] #> baskets.of.Granny      12    4    5    6    9    3 #> baskets.of.Geraldine    5    4    2    4   12    9  cbind(1:3, 4:6, matrix(7:12, ncol=2)) #>      [,1] [,2] [,3] [,4] #> [1,]    1    4    7   10 #> [2,]    2    5    8   11 #> [3,]    3    6    9   12  # Using the Indices  ## Extracting values from a matrix  ### Using numeric indices  first.matrix[1:2, 2:3] #>      [,1] [,2] #> [1,]    4    7 #> [2,]    5    8 first.matrix[2:3,] #>      [,1] [,2] [,3] [,4] #> [1,]    2    5    8   11 #> [2,]    3    6    9   12  ### Dropping values using negative indices  first.matrix[-2,-3] #>      [,1] [,2] [,3] #> [1,]    1    4   10 #> [2,]    3    6   12  nr <- nrow(first.matrix) id <- nr*2+2 first.matrix[-id] #>  [1]  1  2  3  4  5  6  7  9 10 11 12  first.matrix[-(2 * nrow(first.matrix) + 2)] #>  [1]  1  2  3  4  5  6  7  9 10 11 12   ### Juggling dimensions  first.matrix[-c(1, 3), ] #> [1]  2  5  8 11 first.matrix[2, , drop=FALSE] #>      [,1] [,2] [,3] [,4] #> [1,]    2    5    8   11  ## Replacing values in a matrix  first.matrix[3, 2] <- 4 first.matrix #>      [,1] [,2] [,3] [,4] #> [1,]    1    4    7   10 #> [2,]    2    5    8   11 #> [3,]    3    4    9   12  first.matrix[2, ] <- c(1,3) first.matrix #>      [,1] [,2] [,3] [,4] #> [1,]    1    4    7   10 #> [2,]    1    3    1    3 #> [3,]    3    4    9   12  first.matrix[1:2, 3:4] <- c(8,4,2,1) first.matrix #>      [,1] [,2] [,3] [,4] #> [1,]    1    4    8    2 #> [2,]    1    3    4    1 #> [3,]    3    4    9   12  # Naming Matrix Rows and Columns  ## Changing the row and column names  rownames(baskets.team) <- c('Granny','Geraldine') rownames(baskets.team) #> [1] \"Granny\"    \"Geraldine\" colnames(baskets.team) <- c('1st','2nd','3th','4th','5th','6th') baskets.team #>           1st 2nd 3th 4th 5th 6th #> Granny     12   4   5   6   9   3 #> Geraldine   5   4   2   4  12   9  colnames(baskets.team)[3] <- '3rd'  baskets.copy <- baskets.team colnames(baskets.copy) <- NULL baskets.copy #>           [,1] [,2] [,3] [,4] [,5] [,6] #> Granny      12    4    5    6    9    3 #> Geraldine    5    4    2    4   12    9  ## Using names as indices  baskets.team[, c(\"2nd\",\"5th\")] #>           2nd 5th #> Granny      4   9 #> Geraldine   4  12  baskets.team[\"Granny\",] #> 1st 2nd 3rd 4th 5th 6th  #>  12   4   5   6   9   3   # Calculating with Matrices  ## Using standard operations with matrices first.matrix + 4 #>      [,1] [,2] [,3] [,4] #> [1,]    5    8   12    6 #> [2,]    5    7    8    5 #> [3,]    7    8   13   16  second.matrix <- matrix(1:3, nrow=3, ncol=4)  first.matrix + second.matrix #>      [,1] [,2] [,3] [,4] #> [1,]    2    5    9    3 #> [2,]    3    5    6    3 #> [3,]    6    7   12   15  # first.matrix + second.matrix[,1:3] # gives error for illustration # Error in first.matrix + second.matrix[, 1:3] : non-conformable arrays  first.matrix + 1:3 #>      [,1] [,2] [,3] [,4] #> [1,]    2    5    9    3 #> [2,]    3    5    6    3 #> [3,]    6    7   12   15  ## Calculating row and column summaries  rowSums(baskets.team) #>    Granny Geraldine  #>        39        36   ## Doing matrix arithmetic  ### Transposing a matrix  t(first.matrix) #>      [,1] [,2] [,3] #> [1,]    1    1    3 #> [2,]    4    3    4 #> [3,]    8    4    9 #> [4,]    2    1   12  t(1:10) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #> [1,]    1    2    3    4    5    6    7    8    9    10  t(first.matrix[2,]) #>      [,1] [,2] [,3] [,4] #> [1,]    1    3    4    1  ### Inverting a matrix  square.matrix <- matrix(c(1,0,3,2,2,4,3,2,1),ncol=3) solve(square.matrix) #>      [,1]       [,2]       [,3] #> [1,]  0.5 -0.8333333  0.1666667 #> [2,] -0.5  0.6666667  0.1666667 #> [3,]  0.5 -0.1666667 -0.1666667  ### Multiplying two matrices  first.matrix %*% t(second.matrix) #>      [,1] [,2] [,3] #> [1,]   15   30   45 #> [2,]    9   18   27 #> [3,]   28   56   84  first.matrix %*% 1:4 #>      [,1] #> [1,]   41 #> [2,]   23 #> [3,]   86 1:3 %*% first.matrix #>      [,1] [,2] [,3] [,4] #> [1,]   12   22   43   40  # Adding More Dimensions  ## Creating an array  ### Using the creator functions  my.array <- array(1:24, dim=c(3,4,2)) my.array #> , , 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]    1    4    7   10 #> [2,]    2    5    8   11 #> [3,]    3    6    9   12 #>  #> , , 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]   13   16   19   22 #> [2,]   14   17   20   23 #> [3,]   15   18   21   24 #>   ### Changing the dimensions of a vector   my.vector <- 1:24 dim(my.vector) <- c(3,4,2) identical(my.array, my.vector) #> [1] TRUE  ## Using dimensions to extract values  my.array[2,3,1] #> [1] 8  my.array[, 3, 2, drop=FALSE] #> , , 1 #>  #>      [,1] #> [1,]   19 #> [2,]   20 #> [3,]   21 #>    my.array[2, , ] #>      [,1] [,2] #> [1,]    2   14 #> [2,]    5   17 #> [3,]    8   20 #> [4,]   11   23   # Combining Different Types of Values in a Data Frame  ## Creating a data frame from a matrix  ### Using the function as.data.frame  baskets.df <- as.data.frame(t(baskets.team))  ### Looking at the structure of a data frame  baskets.df #>     Granny Geraldine #> 1st     12         5 #> 2nd      4         4 #> 3rd      5         2 #> 4th      6         4 #> 5th      9        12 #> 6th      3         9 str(baskets.df) #> 'data.frame':\t6 obs. of  2 variables: #>  $ Granny   : num  12 4 5 6 9 3 #>  $ Geraldine: num  5 4 2 4 12 9  ### Counting values and variables  nrow(baskets.df) #> [1] 6 length(baskets.df) #> [1] 2  ## Creating a data frame from scratch  ### Making a data frame from vectors  employee <- c('John Doe','Peter Gynn','Jolie Hope') salary <- c(21000, 23400, 26800) startdate <- as.Date(c('2010-11-1','2008-3-25','2007-3-14'))  employ.data <- data.frame(employee, salary, startdate)  str(employ.data) #> 'data.frame':\t3 obs. of  3 variables: #>  $ employee : chr  \"John Doe\" \"Peter Gynn\" \"Jolie Hope\" #>  $ salary   : num  21000 23400 26800 #>  $ startdate: Date, format: \"2010-11-01\" \"2008-03-25\" ...  ### Keeping characters as characters  employ.data <- data.frame(employee, salary, startdate, stringsAsFactors=FALSE) str(employ.data) #> 'data.frame':\t3 obs. of  3 variables: #>  $ employee : chr  \"John Doe\" \"Peter Gynn\" \"Jolie Hope\" #>  $ salary   : num  21000 23400 26800 #>  $ startdate: Date, format: \"2010-11-01\" \"2008-03-25\" ...  ## Naming variables and observations  ### Working with variable names  colnames(employ.data) #> [1] \"employee\"  \"salary\"    \"startdate\" names(employ.data) #> [1] \"employee\"  \"salary\"    \"startdate\"  names(employ.data)[3] <- 'firstday' names(employ.data) #> [1] \"employee\" \"salary\"   \"firstday\"  ### Naming observations  rownames(employ.data) #> [1] \"1\" \"2\" \"3\" rownames(employ.data) <- c('Chef','BigChef','BiggerChef') employ.data #>              employee salary   firstday #> Chef         John Doe  21000 2010-11-01 #> BigChef    Peter Gynn  23400 2008-03-25 #> BiggerChef Jolie Hope  26800 2007-03-14  # Manipulating Values in a Data Frame  ## Extracting variables, observations, and values  ### Pretending it's a matrix  baskets.df['3rd', 'Geraldine'] #> [1] 2 baskets.df[, 1] #> [1] 12  4  5  6  9  3  str(baskets.df[, 1, drop=FALSE]) #> 'data.frame':\t6 obs. of  1 variable: #>  $ Granny: num  12 4 5 6 9 3  ### Putting your dollar where your data is  baskets.df$Granny #> [1] 12  4  5  6  9  3  ## Adding observations to a data frame  ### Adding a single observation  result <- rbind(baskets.df, c(7,4)) result #>     Granny Geraldine #> 1st     12         5 #> 2nd      4         4 #> 3rd      5         2 #> 4th      6         4 #> 5th      9        12 #> 6th      3         9 #> 7        7         4  baskets.df <- rbind(baskets.df,'7th' = c(7,4)) baskets.df #>     Granny Geraldine #> 1st     12         5 #> 2nd      4         4 #> 3rd      5         2 #> 4th      6         4 #> 5th      9        12 #> 6th      3         9 #> 7th      7         4  ### Adding a series of new observations using rbind  new.baskets <- data.frame(Granny=c(3,8),Geraldine=c(9,4)) rownames(new.baskets) <- c('8th','9th') baskets.df <- rbind(baskets.df, new.baskets)  ### Adding a series of values using indices  baskets.df[c('8th','9th'), ] <- matrix(c(3,8,9,4), ncol=2) baskets.df[c('8th','9th'), ] <- c(3,8,9,4)  ## Adding variables to a data frame  ### Adding a single variable  baskets.of.Gabrielle <- c(11,5,6,7,3,12,4,5,9) baskets.df$Gabrielle <- baskets.of.Gabrielle  head(baskets.df, 4) #>     Granny Geraldine Gabrielle #> 1st     12         5        11 #> 2nd      4         4         5 #> 3rd      5         2         6 #> 4th      6         4         7  ### Adding multiple variables using cbind  new.df <- data.frame(    Gertrude  =  c(3,5,2,1,NA,3,1,1,4),    Guinevere =  c(6,9,7,3,3,6,2,10,6) )  head(cbind(baskets.df, new.df), 4) #>     Granny Geraldine Gabrielle Gertrude Guinevere #> 1st     12         5        11        3         6 #> 2nd      4         4         5        5         9 #> 3rd      5         2         6        2         7 #> 4th      6         4         7        1         3  # Combining Different Objects in a List  ## Creating a list  ### Creating an unnamed list  baskets.list <- list(baskets.team, '2010-2011') baskets.list #> [[1]] #>           1st 2nd 3rd 4th 5th 6th #> Granny     12   4   5   6   9   3 #> Geraldine   5   4   2   4  12   9 #>  #> [[2]] #> [1] \"2010-2011\" #>   ### Creating a named list  baskets.nlist <- list(scores=baskets.team, season='2010-2011') baskets.nlist #> $scores #>           1st 2nd 3rd 4th 5th 6th #> Granny     12   4   5   6   9   3 #> Geraldine   5   4   2   4  12   9 #>  #> $season #> [1] \"2010-2011\" #>    ### Playing with the names of elements  names(baskets.nlist) #> [1] \"scores\" \"season\"  ### Getting the number of elements  length(baskets.list) #> [1] 2  ## Extracting elements from lists  ### Using [[]]  baskets.list[[1]] #>           1st 2nd 3rd 4th 5th 6th #> Granny     12   4   5   6   9   3 #> Geraldine   5   4   2   4  12   9 baskets.nlist[['scores']] #>           1st 2nd 3rd 4th 5th 6th #> Granny     12   4   5   6   9   3 #> Geraldine   5   4   2   4  12   9  ### Using []  baskets.list[-1] #> [[1]] #> [1] \"2010-2011\" #>  baskets.nlist[names(baskets.nlist)=='season'] #> $season #> [1] \"2010-2011\" #>   ## Changing the elements in lists  ### Changing the value of elements  baskets.nlist[[1]] <- baskets.df baskets.nlist[['scores']] <- baskets.df baskets.nlist$scores <- baskets.df  baskets.nlist[1] <- list(baskets.df)  baskets.list[1:2] <- list(baskets.df, '2009-2010')  ### Removing elements  baskets.nlist[[1]] <- NULL baskets.nlist$scores <- NULL baskets.nlist['scores'] <- NULL  baskets.nlist <- list(scores=baskets.df, season='2010-2011') baskets.nlist['scores'] <- list(NULL) baskets.nlist #> $scores #> NULL #>  #> $season #> [1] \"2010-2011\" #>   ### Adding extra elements using indices  baskets.nlist$players <- c('Granny','Geraldine') baskets.nlist[['players']] <- c('Granny','Geraldine') baskets.nlist['players'] <- list(c('Granny','Geraldine'))  baskets.list[[3]] <- c('Granny','Geraldine') baskets.list[3] <- list(c('Granny','Geraldine'))  ### Combining lists    baskets.list <- list(baskets.team,'2010-2011') players <- list(rownames(baskets.team))  c(baskets.list, players) #> [[1]] #>           1st 2nd 3rd 4th 5th 6th #> Granny     12   4   5   6   9   3 #> Geraldine   5   4   2   4  12   9 #>  #> [[2]] #> [1] \"2010-2011\" #>  #> [[3]] #> [1] \"Granny\"    \"Geraldine\" #>   ## Reading the output of str() for lists  str(baskets.list) #> List of 2 #>  $ : num [1:2, 1:6] 12 5 4 4 5 2 6 4 9 12 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:2] \"Granny\" \"Geraldine\" #>   .. ..$ : chr [1:6] \"1st\" \"2nd\" \"3rd\" \"4th\" ... #>  $ : chr \"2010-2011\"  ## Seeing the forest through the trees"},{"path":"/reference/ch08.html","id":null,"dir":"Reference","previous_headings":"","what":"Print examples of chapter 8 of 'R for Dummies'. — ch08","title":"Print examples of chapter 8 of 'R for Dummies'. — ch08","text":"print listing examples chapter, use ch8(). run examples ch8(), use example(ch8).","code":""},{"path":"/reference/ch08.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print examples of chapter 8 of 'R for Dummies'. — ch08","text":"","code":"ch08()  ch8()"},{"path":[]},{"path":"/reference/ch08.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print examples of chapter 8 of 'R for Dummies'. — ch08","text":"","code":"# Chapter 8 # Putting the Fun in Functions  # Moving from Scripts to Functions  ## Making the script  x <- c(0.458, 1.6653, 0.83112) percent <- round(x * 100, digits = 1) result <- paste(percent, \"%\", sep = \"\") print(result) #> [1] \"45.8%\"  \"166.5%\" \"83.1%\"   if (FALSE) { # source('pastePercent.R') # Only after saving }  ## Transforming the script  addPercent <- function(x){   percent <- round(x * 100, digits = 1)   result <- paste(percent, \"%\", sep = \"\")   return(result) }  ## Using the function  ls() #> [1] \"addPercent\" \"percent\"    \"result\"     \"x\"           ### Formatting the numbers  new.numbers <- c(0.8223, 0.02487, 1.62, 0.4) addPercent(new.numbers) #> [1] \"82.2%\" \"2.5%\"  \"162%\"  \"40%\"    ### Playing with function objects  ppaste <- addPercent ppaste #> function(x){ #>   percent <- round(x * 100, digits = 1) #>   result <- paste(percent, \"%\", sep = \"\") #>   return(result) #> } #> <environment: 0x55fb8c4110c8>  ## Reducing the number of lines  ### Returning values by default  # AddPercent function without last return - not written in book addPercent <- function(x){   percent <- round(x * 100, digits = 1)   result <- paste(percent, \"%\", sep = \"\") }  print( addPercent(new.numbers) ) #> [1] \"82.2%\" \"2.5%\"  \"162%\"  \"40%\"    addPercent <- function(x){   percent <- round(x * 100, digits = 1)   paste(percent, \"%\", sep = \"\") }  addPercent <- function(x){   if( !is.numeric(x) ) return(NULL)   percent <- round(x * 100, digits = 1)   paste(percent, \"%\", sep = \"\") }  ### Breaking the walls  odds <- function(x) x / (1-x)  odds(0.8) #> [1] 4  addPercent <- function(x) paste(round(x * 100, digits = 1), \"%\", sep = \"\")  # Using Arguments the Smart Way  ## Adding more arguments  percentages <- c(58.23, 120.4, 33) addPercent(percentages/100) #> [1] \"58.2%\"  \"120.4%\" \"33%\"     ### Adding the mult argument  addPercent <- function(x, mult){   percent <- round(x * mult, digits = 1)   paste(percent, \"%\", sep = \"\") }  addPercent(percentages, mult = 1) #> [1] \"58.2%\"  \"120.4%\" \"33%\"     ### Adding a default value  # addPercent(new.numbers) # Gives error for illustrative purposes # Error in x * mult : 'mult' is missing  addPercent <- function(x, mult = 100){   percent <- round(x * mult, digits = 1)   paste(percent, \"%\", sep = \"\") }  addPercent(new.numbers) #> [1] \"82.2%\" \"2.5%\"  \"162%\"  \"40%\"    addPercent(percentages, 1) #> [1] \"58.2%\"  \"120.4%\" \"33%\"     ## Conjuring tricks with dots  addPercent <- function(x, mult = 100, ...){   percent <- round(x * mult, ...)   paste(percent, \"%\", sep = \"\") }  addPercent(new.numbers, digits = 2) #> [1] \"82.23%\" \"2.49%\"  \"162%\"   \"40%\"    addPercent(new.numbers) #> [1] \"82%\"  \"2%\"   \"162%\" \"40%\"    addPercent <- function(x, mult = 100, digits = 1){   percent <- round(x * mult, digits = digits)   paste(percent, \"%\", sep = \"\") }  ## Using functions as arguments  ### Applying different ways of rounding  addPercent <- function(x, mult = 100, FUN = round, ...){   percent <- FUN(x * mult, ...)   paste(percent, \"%\", sep = \"\") }  addPercent(new.numbers, FUN = signif, digits = 3) #> [1] \"82.2%\" \"2.49%\" \"162%\"  \"40%\"    ### Using anonymous functions  profits <- c(2100, 1430, 3580, 5230) rel.profit <- function(x) round(x / sum(x) * 100) addPercent(profits,                 FUN = function(x) round(x / sum(x) * 100) ) #> [1] \"17%\" \"12%\" \"29%\" \"42%\"  addPercent(profits / sum(profits)) #> [1] \"17%\" \"12%\" \"29%\" \"42%\"  # Coping with Scoping    ## Crossing the borders  ### Creating a test case  x <- 1:5 test <- function(x){   cat(\"This is x:\", x, \"\\n\")   rm(x)   cat(\"This is x after removing it:\",x,\"\\n\") }  test(5:1) #> This is x: 5 4 3 2 1  #> This is x after removing it: 1 2 3 4 5   ### Searching the path  ## Using internal functions  calculate.eff <- function(x, y, control){   min.base <- function(z) z - mean(control)   min.base(x) / min.base(y) }   half <- c(2.23, 3.23, 1.48) full <- c(4.85, 4.95, 4.12) nothing <- c(0.14, 0.18, 0.56, 0.23) calculate.eff(half, full, nothing) #> [1] 0.4270093 0.6318887 0.3129473  # Dispatching to a Method  ## Finding the methods behind the function  print #> function (x, ...)  #> UseMethod(\"print\") #> <bytecode: 0x55fb87236158> #> <environment: namespace:base>  ### Using methods with UseMethod  small.one <- data.frame(a = 1:2, b = 2:1) print.data.frame(small.one) #>   a b #> 1 1 2 #> 2 2 1  ### Using default methods  print.default(small.one) #> $a #> [1] 1 2 #>  #> $b #> [1] 2 1 #>  #> attr(,\"class\") #> [1] \"data.frame\"  ## Doing it yourself  ### Adapting the addPercent function  addPercent.character <- function(x){   paste(x,\"%\",sep=\"\") }  # Not written out in the book - needed for rest code #  addPercent.numeric <- function(x, mult = 100, FUN = round, ...){   percent <- FUN(x * mult, ...)   paste(percent, \"%\", sep = \"\") }  addPercent <- function(x,...){   UseMethod(\"addPercent\") }  addPercent(new.numbers, FUN = floor) #> [1] \"82%\"  \"2%\"   \"162%\" \"40%\"   addPercent(letters[1:6]) #> [1] \"a%\" \"b%\" \"c%\" \"d%\" \"e%\" \"f%\"  # Adding a default function  # addPercent(small.one) # Gives error on purpose # Error in UseMethod(\"addPercent\") : #  no applicable method for 'addPercent' applied to an object of class \"data.frame\"  addPercent.default <- function(x){   cat('You should try a numeric or character vector.\\n') }"},{"path":"/reference/ch09.html","id":null,"dir":"Reference","previous_headings":"","what":"Print examples of chapter 9 of 'R for Dummies'. — ch09","title":"Print examples of chapter 9 of 'R for Dummies'. — ch09","text":"print listing examples chapter, use ch9(). run examples ch9(), use example(ch9).","code":""},{"path":"/reference/ch09.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print examples of chapter 9 of 'R for Dummies'. — ch09","text":"","code":"ch09()  ch9()"},{"path":[]},{"path":"/reference/ch09.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print examples of chapter 9 of 'R for Dummies'. — ch09","text":"","code":"# Chapter 9 # Controlling the Logical Flow  #Making Choices with if Statements  priceCalculator <- function(hours, pph=40){     net.price <- hours * pph     round(net.price) }  priceCalculator <- function(hours, pph=40){     net.price <- hours * pph     if (hours > 100) {       net.price <- net.price * 0.9     }     round(net.price) }  priceCalculator(hours = 55) #> [1] 2200 priceCalculator(hours = 110) #> [1] 3960  priceCalculator <- function(hours, pph=40){     net.price <- hours * pph     if(hours > 100) net.price <- net.price * 0.9     round(net.price) }  ?'if' ?\"if\" ?`if`  ## Doing Something Else with an if...else Statement  priceCalculator <- function(hours, pph=40, public=TRUE){     net.price <- hours * pph     if(hours > 100) net.price <- net.price * 0.9     if(public) {       tot.price <- net.price * 1.06     } else {       tot.price <- net.price * 1.12     }     round(tot.price) }  priceCalculator(25,public=TRUE) #> [1] 1060 priceCalculator(25,public=FALSE) #> [1] 1120  priceCalculator <- function(hours, pph=40, public=TRUE){     net.price <- hours * pph     if(hours > 100) net.price <- net.price * 0.9     if(public) tot.price <- net.price * 1.06 else                tot.price <- net.price * 1.12     round(tot.price) }  priceCalculator <- function(hours, pph=40, public=TRUE){     net.price <- hours * pph     if(hours > 100) net.price <- net.price * 0.9     tot.price <- net.price * if(public) 1.06 else 1.12     round(tot.price) }  # Vectorizing Choices  ## Looking at the problem  #priceCalculator(c(25,110)) priceCalculator(110) #> [1] 4198 c(25, 110) > 100 #> [1] FALSE  TRUE  ## Choosing based on a logical vector  ### Understanding how it works  ifelse(c(1,3) < 2.5 , 1:2 , 3:4) #> [1] 1 4  ### Trying it out  my.hours <- c(25,110) my.hours * 40 * ifelse(my.hours > 100, 0.9, 1) #> [1] 1000 3960  ### Adapting the function  priceCalculator <- function(hours,pph=40,public){     net.price <- hours * pph     net.price <- net.price * ifelse(hours > 100 , 0.9, 1)     tot.price <- net.price * ifelse(public, 1.06, 1.12)     round(tot.price) }  clients <- data.frame(   hours = c(25, 110, 125, 40),   public = c(TRUE,TRUE,FALSE,FALSE) )  with(clients, priceCalculator(hours, public = public)) #> [1] 1060 4198 5040 1792  # Making Multiple Choices  ## Chaining if...else statements   # Code example # NOT run #if(client=='private'){ #  tot.price <- net.price * 1.12      # 12% VAT #} else { #  if(client=='public'){ #    tot.price <- net.price * 1.06    # 6% VAT #  } else { #    tot.price <- net.price * 1    # 0% VAT #  } #}  # Code example # NOT run #if(client=='private'){ #    tot.price <- net.price * 1.12 #} else if(client=='public'){ #    tot.price <- net.price * 1.06 #} else { #    tot.price <- net.price #}  # Code example # NOT run #VAT <- ifelse(client=='private', 1.12, #          ifelse(client == 'public', 1.06, 1) #       ) #tot.price <- net.price * VAT #  ## Switching between possibilities  ### Making choices with switch  # Code example # NOT run # VAT <- switch(client, private=1.12, public=1.06, abroad=1)    ### Using default values in switch  # Code example # NOT run # VAT <- switch(client, private=1.12, public=1.06, 1)  client <- 'other' switch(client, private=1.12, public=1.06, 1) #> [1] 1   # Looping Through Values  ## Constructing a for loop  ## Calculating values in a for loop  ### Using the values of the vector  priceCalculator <- function(hours, pph=40, client){     net.price <- hours * pph *                    ifelse(hours > 100, 0.9, 1)      VAT <- numeric(0)     for(i in client){       VAT <- c(VAT,switch(i, private=1.12, public=1.06, 1))     }      tot.price <- net.price * VAT     round(tot.price) }   clients$type <- c('public','abroad','private','abroad') priceCalculator(clients$hours, client=clients$type) #> [1] 1060 3960 5040 1600  ### Using loops and indices  nclient <- length(client) VAT <- numeric(nclient) for(i in seq_along(client)){   VAT[i] <- switch(client[i], private=1.12, public=1.06, 1) } VAT #> [1] 1  # Looping without Loops: Meeting the Apply Family  songline <- 'Get out of my dreams...' for(songline in 1:5) print('...Get into my car!') #> [1] \"...Get into my car!\" #> [1] \"...Get into my car!\" #> [1] \"...Get into my car!\" #> [1] \"...Get into my car!\" #> [1] \"...Get into my car!\"  songline #> [1] 5  ## Looking at the family features  ## Meeting three of the members   ## Applying functions on rows and columns  ### Counting birds  counts <- matrix(c(3,2,4,6,5,1,8,6,1), ncol=3) colnames(counts) <- c('sparrow','dove','crow') counts #>      sparrow dove crow #> [1,]       3    6    8 #> [2,]       2    5    6 #> [3,]       4    1    1  apply(counts, 2, max) #> sparrow    dove    crow  #>       4       6       8   ### Adding extra arguments  counts[2, 2] <- NA apply(counts,2,max) #> sparrow    dove    crow  #>       4      NA       8  apply(counts, 2, max, na.rm=TRUE) #> sparrow    dove    crow  #>       4       6       8   ## Applying functions to listlike objects  ### Applying a function to a vector  #### Using switch on vectors  sapply(c('a','b'), switch, a='Hello', b='Goodbye') #>         a         b  #>   \"Hello\" \"Goodbye\"   #### Replacing a complete for loop with a single statement  priceCalculator <- function(hours, pph=40, client){   net.price <- hours * pph * ifelse(hours > 100, 0.9, 1)    VAT <- sapply(client, switch, private=1.12, public=1.06, 1)    tot.price <- net.price * VAT   round(tot.price) }  ### Applying a function to a data frame  sapply(clients,class) #>       hours      public        type  #>   \"numeric\"   \"logical\" \"character\"   ### Simplifying results (or not) with sapply  sapply(clients, unique) #> $hours #> [1]  25 110 125  40 #>  #> $public #> [1]  TRUE FALSE #>  #> $type #> [1] \"public\"  \"abroad\"  \"private\" #>   ### Getting lists using lapply  sapply(clients[c(1,3), ], unique) #>      hours public  type      #> [1,] \"25\"  \"TRUE\"  \"public\"  #> [2,] \"125\" \"FALSE\" \"private\"  lapply(clients[c(1,3), ], unique) #> $hours #> [1]  25 125 #>  #> $public #> [1]  TRUE FALSE #>  #> $type #> [1] \"public\"  \"private\" #>"},{"path":"/reference/ch10.html","id":null,"dir":"Reference","previous_headings":"","what":"Print examples of chapter 10 of 'R for Dummies'. — ch10","title":"Print examples of chapter 10 of 'R for Dummies'. — ch10","text":"print listing examples chapter, use ch10(). run examples ch10(), use example(ch10).","code":""},{"path":"/reference/ch10.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print examples of chapter 10 of 'R for Dummies'. — ch10","text":"","code":"ch10()"},{"path":[]},{"path":"/reference/ch10.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print examples of chapter 10 of 'R for Dummies'. — ch10","text":"","code":"# Chapter 10 # Debugging Your Code  # NOTE : Much code is commented out, as they generate # errors on purpose. Uncomment the code and run the # line to see the error and try the debugging out  # Knowing What to Look For  # Reading Errors and Warnings  ## Reading error messages  # \"a\" + 1 # Error in \"a\" + 1 : non-numeric argument to binary operator  # data.frame(1:10,10:1,) # Error in data.frame(1:10, 10:1, ) : argument is missing, with no default  ## Caring about warnings (or not)  x <- 1:10 #y <- if (x < 5 ) 0 else 1  x <- 4 #sqrt(x - 5)  plot(1:10, 10:1, col='green')    # Going Bug Hunting  ## Calculating the logit  # checks input and does logit calculation logit <- function(x){   x <- ifelse(x < 0 | x > 1, \"NA\", x)   log(x / (1 - x) ) } # transforms percentage to number and calls logit logitpercent <- function(x){   x <- gsub(\"%\", \"\", x)   logit(as.numeric(x)) }    ## Knowing where an error comes from  # logitpercent('50%') # Error in 1 - x : non-numeric argument to binary operator  # traceback()  ## Looking inside a function   ### Telling R which function to debug  # debug(logit) # logitpercent('50%')  ### Stepping through the function  ### Start browsing from within the function  logit <- function(x){   x <- ifelse(x < 0 | x > 1, \"NA\", x)   browser()   log(x / (1 - x) ) }  # logit(50)  # Generating Your Own Messages  ## Creating errors  logit <- function(x){   if( any(x < 0 | x > 1) ) stop('x not between 0 and 1')   log(x / (1 - x) ) }   # logitpercent(c('50%','150%')) # Error in logit(as.numeric(x)/100) : x not between 0 and 1  ## Creating warnings # Function wrapped around for illustrative purposes # In book only body is given logit <- function(x){   x <- ifelse(x < 0 | x > 1, NA, x )   if( any(is.na(x)) ) warning('x not between 0 and 1')   log(x / (1 - x) ) }  # logitpercent(c('50%','150%')) # throws error  # Recognizing the Mistakes You're Sure to Make  ## Starting with the wrong data   ## Having your data in the wrong format    ### Dropping dimensions when you don't expect it  rowsum.df <- function(x){   id <- sapply(x,is.numeric)   rowSums(x[, id]) }  # rowsum.df(sleep)  ### Messing up with lists strsplit('this is a sentence',' ')[2] #> [[1]] #> NULL #>   strsplit('this is a sentence',' ') #> [[1]] #> [1] \"this\"     \"is\"       \"a\"        \"sentence\" #>   strsplit('this is a sentence',' ')[[1]][2] #> [1] \"is\"  customer <- c('Johan Delong','Marie Petit') namesplit <- strsplit(customer,' ')  paste(namesplit[2],collapse='.') #> [1] \"c(\\\"Marie\\\", \\\"Petit\\\")\"  paste(namesplit[[2]],collapse='.') #> [1] \"Marie.Petit\"    ### Mixing up factors and numeric vectors  cyl.factor <- as.factor(mtcars$cyl)  median(as.numeric(cyl.factor)) #> [1] 2  as.numeric(levels(cyl.factor))[cyl.factor] #>  [1] 6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 6 8 4"},{"path":"/reference/ch11.html","id":null,"dir":"Reference","previous_headings":"","what":"Print examples of chapter 11 of 'R for Dummies'. — ch11","title":"Print examples of chapter 11 of 'R for Dummies'. — ch11","text":"print listing examples chapter, use ch11(). run examples ch11(), use example(ch11).","code":""},{"path":"/reference/ch11.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print examples of chapter 11 of 'R for Dummies'. — ch11","text":"","code":"ch11()"},{"path":[]},{"path":"/reference/ch11.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print examples of chapter 11 of 'R for Dummies'. — ch11","text":"","code":"# Chapter 11 - Getting Help   # Finding Information in the R Help Files  ## When you know exactly what you're looking for  ?date  ## When you don't know exactly what you're looking for  ??date   # Searching the Web for Help with R  if (FALSE) { RSiteSearch(\"cluster analysis\") }  if (FALSE) { install.packages(\"sos\") } library(\"sos\") #> Loading required package: brew #>  #> Attaching package: ‘sos’ #> The following object is masked from ‘package:utils’: #>  #>     ? if (FALSE) { findFn(\"cluster\") }  # Getting Involved in the R Community  ## Using the R mailing lists  ## Discussing R on Stack Overflow and Stack Exchange  ## Tweeting about R  # Making a Minimal Reproducible Example  dput(cars[1:4, ]) #> structure(list(speed = c(4, 4, 7, 7), dist = c(2, 10, 4, 22)), row.names = c(NA,  #> 4L), class = \"data.frame\")  ## Creating sample data with random values  set.seed(1) x <- rnorm(5) x #> [1] -0.6264538  0.1836433 -0.8356286  1.5952808  0.3295078  cards <- c(1:9, \"J\", \"Q\", \"K\", \"A\") suits <- c(\"Spades\", \"Diamonds\", \"Hearts\", \"Clubs\") deck <- paste(rep(suits, each=13), cards) set.seed(123) sample(deck, 7) #> [1] \"Hearts 5\"   \"Diamonds 2\" \"Diamonds 1\" \"Spades 3\"   \"Clubs 3\"    #> [6] \"Clubs 4\"    \"Hearts Q\"    set.seed(5) sample(LETTERS[1:3], 12, replace=TRUE) #>  [1] \"B\" \"C\" \"A\" \"C\" \"C\" \"A\" \"A\" \"A\" \"B\" \"C\" \"C\" \"C\"  set.seed(42) dat <- data.frame(    x = sample(1:5),    y = sample(c(\"yes\", \"no\"), 5, replace = TRUE) ) dat #>   x   y #> 1 1  no #> 2 5  no #> 3 4  no #> 4 3 yes #> 5 2  no  dput(cars[1:4, ]) #> structure(list(speed = c(4, 4, 7, 7), dist = c(2, 10, 4, 22)), row.names = c(NA,  #> 4L), class = \"data.frame\")  ## Producing minimal code  ## Providing the necessary information  sessionInfo() #> R version 4.1.2 (2021-11-01) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 20.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C           LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] sos_2.1-0              brew_1.0-7             stringr_1.4.0          #> [4] rfordummies_0.1.5.9000 #>  #> loaded via a namespace (and not attached): #>  [1] pillar_1.7.0      compiler_4.1.2    bslib_0.3.1       jquerylib_0.1.4   #>  [5] tools_4.1.2       digest_0.6.29     downlit_0.4.0     jsonlite_1.7.3    #>  [9] memoise_2.0.1     evaluate_0.15     lifecycle_1.0.1   tibble_3.1.6      #> [13] pkgconfig_2.0.3   rlang_1.0.1       cli_3.2.0         rstudioapi_0.13   #> [17] curl_4.3.2        yaml_2.3.5        pkgdown_2.0.2     xfun_0.29         #> [21] fastmap_1.1.0     httr_1.4.2        withr_2.4.3       knitr_1.37        #> [25] xml2_1.3.3        systemfonts_1.0.4 desc_1.4.0        fs_1.5.2          #> [29] vctrs_0.3.8       sass_0.4.0        rprojroot_2.0.2   glue_1.6.1        #> [33] R6_2.5.1          textshaping_0.3.6 processx_3.5.2    fansi_1.0.2       #> [37] rmarkdown_2.11    callr_3.7.0       purrr_0.3.4       magrittr_2.0.2    #> [41] whisker_0.4       fortunes_1.5-4    ps_1.6.0          ellipsis_0.3.2    #> [45] htmltools_0.5.2   ragg_1.2.1        utf8_1.2.2        stringi_1.7.6     #> [49] cachem_1.0.6      crayon_1.5.0"},{"path":"/reference/ch12.html","id":null,"dir":"Reference","previous_headings":"","what":"Print examples of chapter 12 of 'R for Dummies'. — ch12","title":"Print examples of chapter 12 of 'R for Dummies'. — ch12","text":"print listing examples chapter, use ch12(). run examples ch12(), use example(ch12).","code":""},{"path":"/reference/ch12.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print examples of chapter 12 of 'R for Dummies'. — ch12","text":"","code":"ch12()"},{"path":[]},{"path":"/reference/ch12.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print examples of chapter 12 of 'R for Dummies'. — ch12","text":"","code":"# Chapter 12 # Getting Data into and out of R  # NOTE : Most of the code depends on actions, directories # and the presence of files. Code that isn't runnable is # commented out.  # Getting Data into R  ## Entering data in the R text editor  elements <- data.frame() # elements <- edit(elements)  # print(elements)  ## Using the Clipboard to copy and paste # Reminder : This only works on Windows  if (FALSE) { # x <- readClipboard() } # x if (FALSE) { # x <- readClipboard() } # x # x <- read.table(file = \"clipboard\", sep = \"\\t\", header=TRUE) # x  ## Reading data in CSV files  ### Using read.csv() to import data  # elements <- read.csv(file.path(\"f:\", \"elements.csv\")) # str(elements) # elements <- read.csv(file.path(\"f:\", \"elements.csv\"), stringsAsFactors=FALSE) # str(elements)  ### Using read.table() to import tabular data in text files  ## Reading data from Excel if (FALSE) { # install.packages(\"XLConnect\") } # library(\"XLConnect\") # excel.file <- file.path(\"~/Elements.xlsx\")  # elements <- readWorksheetFromFile(excel.file, sheet=1) # elements <- readWorksheetFromFile(excel.file, sheet=\"Sheet1\")  ## Working with other data types  # library(foreign) # read.spss(file=\"location/of/myfile\")  # Getting Your Data out of R   # writeClipboard(names(iris))  # write.table(head(iris), file=\"clipboard\", sep=\"\\t\", row.names=FALSE)  # Working with Files and Folders  ## Understanding the working directory getwd() #> [1] \"/tmp/Rtmp1ZL64K/file32dd29eeecf2/reference\"  # setwd(\"F:/git/roxygen2\") # getwd() # setwd(\"F:\\git\\stringr\") # getwd()  file.path(\"f:\", \"git\", \"surveyor\") #> [1] \"f:/git/surveyor\"  # setwd(file.path(\"F:\", \"git\", \"roxygen2\")) # getwd()  file.path(\"F:\", \"git\", \"roxygen2\", \"roxygen2\", \"README.md\" ) #> [1] \"F:/git/roxygen2/roxygen2/README.md\"  ## Manipulating files  # list.files(file.path(\"F:\", \"git\", \"roxygen2\")) my.file <- tempfile() my.file #> [1] \"/tmp/Rtmp1ZL64K/file32dd4832d957\" write.csv(iris, file=my.file) list.files(tempdir()) #> [1] \"bslib-da7ab7cb5d3292a4a1d07d62236b8ea8\"                                                                #> [2] \"downlit\"                                                                                               #> [3] \"file32dd29eeecf2\"                                                                                      #> [4] \"file32dd4832d957\"                                                                                      #> [5] \"repos_https%3A%2F%2Fpackagemanager.rstudio.com%2Fall%2F__linux__%2Ffocal%2Flatest%2Fsrc%2Fcontrib.rds\"  file.iris <- read.csv(my.file)  file.remove(my.file) #> [1] TRUE list.files(tempdir()) #> [1] \"bslib-da7ab7cb5d3292a4a1d07d62236b8ea8\"                                                                #> [2] \"downlit\"                                                                                               #> [3] \"file32dd29eeecf2\"                                                                                      #> [4] \"repos_https%3A%2F%2Fpackagemanager.rstudio.com%2Fall%2F__linux__%2Ffocal%2Flatest%2Fsrc%2Fcontrib.rds\""},{"path":"/reference/ch13.html","id":null,"dir":"Reference","previous_headings":"","what":"Print examples of chapter 13 of 'R for Dummies'. — ch13","title":"Print examples of chapter 13 of 'R for Dummies'. — ch13","text":"print listing examples chapter, use ch13(). run examples ch13(), use example(ch13).","code":""},{"path":"/reference/ch13.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print examples of chapter 13 of 'R for Dummies'. — ch13","text":"","code":"ch13()"},{"path":[]},{"path":"/reference/ch13.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print examples of chapter 13 of 'R for Dummies'. — ch13","text":"","code":"# C hapter 13 - Manipulating and Processing Data  # Deciding on the Most Appropriate Data Structure  # Creating Subsets of Your Data  ## Understanding the three subset operators ## Understanding the five ways of specifying the subset  str(islands) #>  Named num [1:48] 11506 5500 16988 2968 16 ... #>  - attr(*, \"names\")= chr [1:48] \"Africa\" \"Antarctica\" \"Asia\" \"Australia\" ... islands[] #>           Africa       Antarctica             Asia        Australia  #>            11506             5500            16988             2968  #>     Axel Heiberg           Baffin            Banks           Borneo  #>               16              184               23              280  #>          Britain          Celebes            Celon             Cuba  #>               84               73               25               43  #>            Devon        Ellesmere           Europe        Greenland  #>               21               82             3745              840  #>           Hainan       Hispaniola         Hokkaido           Honshu  #>               13               30               30               89  #>          Iceland          Ireland             Java           Kyushu  #>               40               33               49               14  #>            Luzon       Madagascar         Melville         Mindanao  #>               42              227               16               36  #>         Moluccas      New Britain       New Guinea  New Zealand (N)  #>               29               15              306               44  #>  New Zealand (S)     Newfoundland    North America    Novaya Zemlya  #>               58               43             9390               32  #>  Prince of Wales         Sakhalin    South America      Southampton  #>               13               29             6795               16  #>      Spitsbergen          Sumatra           Taiwan         Tasmania  #>               15              183               14               26  #> Tierra del Fuego            Timor        Vancouver         Victoria  #>               19               13               12               82  islands[c(8, 1, 1, 42)] #>  Borneo  Africa  Africa Sumatra  #>     280   11506   11506     183  islands[-(3:46)] #>     Africa Antarctica  Vancouver   Victoria  #>      11506       5500         12         82  islands[islands < 20] #>     Axel Heiberg           Hainan           Kyushu         Melville  #>               16               13               14               16  #>      New Britain  Prince of Wales      Southampton      Spitsbergen  #>               15               13               16               15  #>           Taiwan Tierra del Fuego            Timor        Vancouver  #>               14               19               13               12  islands[c(\"Madagascar\", \"Cuba\")] #> Madagascar       Cuba  #>        227         43   ## Subsetting data frames  str(iris) #> 'data.frame':\t150 obs. of  5 variables: #>  $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... #>  $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... #>  $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... #>  $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... #>  $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ... iris[1:5, ] #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa iris[, c(\"Sepal.Length\", \"Sepal.Width\")] #>     Sepal.Length Sepal.Width #> 1            5.1         3.5 #> 2            4.9         3.0 #> 3            4.7         3.2 #> 4            4.6         3.1 #> 5            5.0         3.6 #> 6            5.4         3.9 #> 7            4.6         3.4 #> 8            5.0         3.4 #> 9            4.4         2.9 #> 10           4.9         3.1 #> 11           5.4         3.7 #> 12           4.8         3.4 #> 13           4.8         3.0 #> 14           4.3         3.0 #> 15           5.8         4.0 #> 16           5.7         4.4 #> 17           5.4         3.9 #> 18           5.1         3.5 #> 19           5.7         3.8 #> 20           5.1         3.8 #> 21           5.4         3.4 #> 22           5.1         3.7 #> 23           4.6         3.6 #> 24           5.1         3.3 #> 25           4.8         3.4 #> 26           5.0         3.0 #> 27           5.0         3.4 #> 28           5.2         3.5 #> 29           5.2         3.4 #> 30           4.7         3.2 #> 31           4.8         3.1 #> 32           5.4         3.4 #> 33           5.2         4.1 #> 34           5.5         4.2 #> 35           4.9         3.1 #> 36           5.0         3.2 #> 37           5.5         3.5 #> 38           4.9         3.6 #> 39           4.4         3.0 #> 40           5.1         3.4 #> 41           5.0         3.5 #> 42           4.5         2.3 #> 43           4.4         3.2 #> 44           5.0         3.5 #> 45           5.1         3.8 #> 46           4.8         3.0 #> 47           5.1         3.8 #> 48           4.6         3.2 #> 49           5.3         3.7 #> 50           5.0         3.3 #> 51           7.0         3.2 #> 52           6.4         3.2 #> 53           6.9         3.1 #> 54           5.5         2.3 #> 55           6.5         2.8 #> 56           5.7         2.8 #> 57           6.3         3.3 #> 58           4.9         2.4 #> 59           6.6         2.9 #> 60           5.2         2.7 #> 61           5.0         2.0 #> 62           5.9         3.0 #> 63           6.0         2.2 #> 64           6.1         2.9 #> 65           5.6         2.9 #> 66           6.7         3.1 #> 67           5.6         3.0 #> 68           5.8         2.7 #> 69           6.2         2.2 #> 70           5.6         2.5 #> 71           5.9         3.2 #> 72           6.1         2.8 #> 73           6.3         2.5 #> 74           6.1         2.8 #> 75           6.4         2.9 #> 76           6.6         3.0 #> 77           6.8         2.8 #> 78           6.7         3.0 #> 79           6.0         2.9 #> 80           5.7         2.6 #> 81           5.5         2.4 #> 82           5.5         2.4 #> 83           5.8         2.7 #> 84           6.0         2.7 #> 85           5.4         3.0 #> 86           6.0         3.4 #> 87           6.7         3.1 #> 88           6.3         2.3 #> 89           5.6         3.0 #> 90           5.5         2.5 #> 91           5.5         2.6 #> 92           6.1         3.0 #> 93           5.8         2.6 #> 94           5.0         2.3 #> 95           5.6         2.7 #> 96           5.7         3.0 #> 97           5.7         2.9 #> 98           6.2         2.9 #> 99           5.1         2.5 #> 100          5.7         2.8 #> 101          6.3         3.3 #> 102          5.8         2.7 #> 103          7.1         3.0 #> 104          6.3         2.9 #> 105          6.5         3.0 #> 106          7.6         3.0 #> 107          4.9         2.5 #> 108          7.3         2.9 #> 109          6.7         2.5 #> 110          7.2         3.6 #> 111          6.5         3.2 #> 112          6.4         2.7 #> 113          6.8         3.0 #> 114          5.7         2.5 #> 115          5.8         2.8 #> 116          6.4         3.2 #> 117          6.5         3.0 #> 118          7.7         3.8 #> 119          7.7         2.6 #> 120          6.0         2.2 #> 121          6.9         3.2 #> 122          5.6         2.8 #> 123          7.7         2.8 #> 124          6.3         2.7 #> 125          6.7         3.3 #> 126          7.2         3.2 #> 127          6.2         2.8 #> 128          6.1         3.0 #> 129          6.4         2.8 #> 130          7.2         3.0 #> 131          7.4         2.8 #> 132          7.9         3.8 #> 133          6.4         2.8 #> 134          6.3         2.8 #> 135          6.1         2.6 #> 136          7.7         3.0 #> 137          6.3         3.4 #> 138          6.4         3.1 #> 139          6.0         3.0 #> 140          6.9         3.1 #> 141          6.7         3.1 #> 142          6.9         3.1 #> 143          5.8         2.7 #> 144          6.8         3.2 #> 145          6.7         3.3 #> 146          6.7         3.0 #> 147          6.3         2.5 #> 148          6.5         3.0 #> 149          6.2         3.4 #> 150          5.9         3.0 iris[, 'Sepal.Length'] #>   [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 5.1 #>  [19] 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 4.9 5.0 #>  [37] 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0 6.4 6.9 5.5 #>  [55] 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 6.2 5.6 5.9 6.1 #>  [73] 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 5.4 6.0 6.7 6.3 5.6 5.5 #>  [91] 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8 7.1 6.3 6.5 7.6 4.9 7.3 #> [109] 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 6.0 6.9 5.6 7.7 6.3 6.7 7.2 #> [127] 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8 #> [145] 6.7 6.7 6.3 6.5 6.2 5.9 iris[, 'Sepal.Length', drop=FALSE] #>     Sepal.Length #> 1            5.1 #> 2            4.9 #> 3            4.7 #> 4            4.6 #> 5            5.0 #> 6            5.4 #> 7            4.6 #> 8            5.0 #> 9            4.4 #> 10           4.9 #> 11           5.4 #> 12           4.8 #> 13           4.8 #> 14           4.3 #> 15           5.8 #> 16           5.7 #> 17           5.4 #> 18           5.1 #> 19           5.7 #> 20           5.1 #> 21           5.4 #> 22           5.1 #> 23           4.6 #> 24           5.1 #> 25           4.8 #> 26           5.0 #> 27           5.0 #> 28           5.2 #> 29           5.2 #> 30           4.7 #> 31           4.8 #> 32           5.4 #> 33           5.2 #> 34           5.5 #> 35           4.9 #> 36           5.0 #> 37           5.5 #> 38           4.9 #> 39           4.4 #> 40           5.1 #> 41           5.0 #> 42           4.5 #> 43           4.4 #> 44           5.0 #> 45           5.1 #> 46           4.8 #> 47           5.1 #> 48           4.6 #> 49           5.3 #> 50           5.0 #> 51           7.0 #> 52           6.4 #> 53           6.9 #> 54           5.5 #> 55           6.5 #> 56           5.7 #> 57           6.3 #> 58           4.9 #> 59           6.6 #> 60           5.2 #> 61           5.0 #> 62           5.9 #> 63           6.0 #> 64           6.1 #> 65           5.6 #> 66           6.7 #> 67           5.6 #> 68           5.8 #> 69           6.2 #> 70           5.6 #> 71           5.9 #> 72           6.1 #> 73           6.3 #> 74           6.1 #> 75           6.4 #> 76           6.6 #> 77           6.8 #> 78           6.7 #> 79           6.0 #> 80           5.7 #> 81           5.5 #> 82           5.5 #> 83           5.8 #> 84           6.0 #> 85           5.4 #> 86           6.0 #> 87           6.7 #> 88           6.3 #> 89           5.6 #> 90           5.5 #> 91           5.5 #> 92           6.1 #> 93           5.8 #> 94           5.0 #> 95           5.6 #> 96           5.7 #> 97           5.7 #> 98           6.2 #> 99           5.1 #> 100          5.7 #> 101          6.3 #> 102          5.8 #> 103          7.1 #> 104          6.3 #> 105          6.5 #> 106          7.6 #> 107          4.9 #> 108          7.3 #> 109          6.7 #> 110          7.2 #> 111          6.5 #> 112          6.4 #> 113          6.8 #> 114          5.7 #> 115          5.8 #> 116          6.4 #> 117          6.5 #> 118          7.7 #> 119          7.7 #> 120          6.0 #> 121          6.9 #> 122          5.6 #> 123          7.7 #> 124          6.3 #> 125          6.7 #> 126          7.2 #> 127          6.2 #> 128          6.1 #> 129          6.4 #> 130          7.2 #> 131          7.4 #> 132          7.9 #> 133          6.4 #> 134          6.3 #> 135          6.1 #> 136          7.7 #> 137          6.3 #> 138          6.4 #> 139          6.0 #> 140          6.9 #> 141          6.7 #> 142          6.9 #> 143          5.8 #> 144          6.8 #> 145          6.7 #> 146          6.7 #> 147          6.3 #> 148          6.5 #> 149          6.2 #> 150          5.9 iris['Sepal.Length'] #>     Sepal.Length #> 1            5.1 #> 2            4.9 #> 3            4.7 #> 4            4.6 #> 5            5.0 #> 6            5.4 #> 7            4.6 #> 8            5.0 #> 9            4.4 #> 10           4.9 #> 11           5.4 #> 12           4.8 #> 13           4.8 #> 14           4.3 #> 15           5.8 #> 16           5.7 #> 17           5.4 #> 18           5.1 #> 19           5.7 #> 20           5.1 #> 21           5.4 #> 22           5.1 #> 23           4.6 #> 24           5.1 #> 25           4.8 #> 26           5.0 #> 27           5.0 #> 28           5.2 #> 29           5.2 #> 30           4.7 #> 31           4.8 #> 32           5.4 #> 33           5.2 #> 34           5.5 #> 35           4.9 #> 36           5.0 #> 37           5.5 #> 38           4.9 #> 39           4.4 #> 40           5.1 #> 41           5.0 #> 42           4.5 #> 43           4.4 #> 44           5.0 #> 45           5.1 #> 46           4.8 #> 47           5.1 #> 48           4.6 #> 49           5.3 #> 50           5.0 #> 51           7.0 #> 52           6.4 #> 53           6.9 #> 54           5.5 #> 55           6.5 #> 56           5.7 #> 57           6.3 #> 58           4.9 #> 59           6.6 #> 60           5.2 #> 61           5.0 #> 62           5.9 #> 63           6.0 #> 64           6.1 #> 65           5.6 #> 66           6.7 #> 67           5.6 #> 68           5.8 #> 69           6.2 #> 70           5.6 #> 71           5.9 #> 72           6.1 #> 73           6.3 #> 74           6.1 #> 75           6.4 #> 76           6.6 #> 77           6.8 #> 78           6.7 #> 79           6.0 #> 80           5.7 #> 81           5.5 #> 82           5.5 #> 83           5.8 #> 84           6.0 #> 85           5.4 #> 86           6.0 #> 87           6.7 #> 88           6.3 #> 89           5.6 #> 90           5.5 #> 91           5.5 #> 92           6.1 #> 93           5.8 #> 94           5.0 #> 95           5.6 #> 96           5.7 #> 97           5.7 #> 98           6.2 #> 99           5.1 #> 100          5.7 #> 101          6.3 #> 102          5.8 #> 103          7.1 #> 104          6.3 #> 105          6.5 #> 106          7.6 #> 107          4.9 #> 108          7.3 #> 109          6.7 #> 110          7.2 #> 111          6.5 #> 112          6.4 #> 113          6.8 #> 114          5.7 #> 115          5.8 #> 116          6.4 #> 117          6.5 #> 118          7.7 #> 119          7.7 #> 120          6.0 #> 121          6.9 #> 122          5.6 #> 123          7.7 #> 124          6.3 #> 125          6.7 #> 126          7.2 #> 127          6.2 #> 128          6.1 #> 129          6.4 #> 130          7.2 #> 131          7.4 #> 132          7.9 #> 133          6.4 #> 134          6.3 #> 135          6.1 #> 136          7.7 #> 137          6.3 #> 138          6.4 #> 139          6.0 #> 140          6.9 #> 141          6.7 #> 142          6.9 #> 143          5.8 #> 144          6.8 #> 145          6.7 #> 146          6.7 #> 147          6.3 #> 148          6.5 #> 149          6.2 #> 150          5.9 iris[1:5, c(\"Sepal.Length\", \"Sepal.Width\")] #>   Sepal.Length Sepal.Width #> 1          5.1         3.5 #> 2          4.9         3.0 #> 3          4.7         3.2 #> 4          4.6         3.1 #> 5          5.0         3.6  ### Taking samples from data  sample(1:6, 10, replace=TRUE) #>  [1] 4 1 5 6 4 2 2 3 1 1  set.seed(1) sample(1:6, 10, replace=TRUE) #>  [1] 1 4 1 2 5 3 6 2 3 3 sample(1:6, 10, replace=TRUE) #>  [1] 1 5 5 2 6 6 2 1 5 5  set.seed(1) sample(1:6, 10, replace=TRUE) #>  [1] 1 4 1 2 5 3 6 2 3 3  set.seed(123) index <- sample(1:nrow(iris), 5) index #> [1]  14  50 118  43 150 iris[index, ] #>     Sepal.Length Sepal.Width Petal.Length Petal.Width   Species #> 14           4.3         3.0          1.1         0.1    setosa #> 50           5.0         3.3          1.4         0.2    setosa #> 118          7.7         3.8          6.7         2.2 virginica #> 43           4.4         3.2          1.3         0.2    setosa #> 150          5.9         3.0          5.1         1.8 virginica  ### Removing duplicate data  duplicated(c(1,2,1,3,1,4)) #> [1] FALSE FALSE  TRUE FALSE  TRUE FALSE duplicated(iriswhich(duplicated(iris)) #> [1] 143 iris[!duplicated(iris), ] #>     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species #> 1            5.1         3.5          1.4         0.2     setosa #> 2            4.9         3.0          1.4         0.2     setosa #> 3            4.7         3.2          1.3         0.2     setosa #> 4            4.6         3.1          1.5         0.2     setosa #> 5            5.0         3.6          1.4         0.2     setosa #> 6            5.4         3.9          1.7         0.4     setosa #> 7            4.6         3.4          1.4         0.3     setosa #> 8            5.0         3.4          1.5         0.2     setosa #> 9            4.4         2.9          1.4         0.2     setosa #> 10           4.9         3.1          1.5         0.1     setosa #> 11           5.4         3.7          1.5         0.2     setosa #> 12           4.8         3.4          1.6         0.2     setosa #> 13           4.8         3.0          1.4         0.1     setosa #> 14           4.3         3.0          1.1         0.1     setosa #> 15           5.8         4.0          1.2         0.2     setosa #> 16           5.7         4.4          1.5         0.4     setosa #> 17           5.4         3.9          1.3         0.4     setosa #> 18           5.1         3.5          1.4         0.3     setosa #> 19           5.7         3.8          1.7         0.3     setosa #> 20           5.1         3.8          1.5         0.3     setosa #> 21           5.4         3.4          1.7         0.2     setosa #> 22           5.1         3.7          1.5         0.4     setosa #> 23           4.6         3.6          1.0         0.2     setosa #> 24           5.1         3.3          1.7         0.5     setosa #> 25           4.8         3.4          1.9         0.2     setosa #> 26           5.0         3.0          1.6         0.2     setosa #> 27           5.0         3.4          1.6         0.4     setosa #> 28           5.2         3.5          1.5         0.2     setosa #> 29           5.2         3.4          1.4         0.2     setosa #> 30           4.7         3.2          1.6         0.2     setosa #> 31           4.8         3.1          1.6         0.2     setosa #> 32           5.4         3.4          1.5         0.4     setosa #> 33           5.2         4.1          1.5         0.1     setosa #> 34           5.5         4.2          1.4         0.2     setosa #> 35           4.9         3.1          1.5         0.2     setosa #> 36           5.0         3.2          1.2         0.2     setosa #> 37           5.5         3.5          1.3         0.2     setosa #> 38           4.9         3.6          1.4         0.1     setosa #> 39           4.4         3.0          1.3         0.2     setosa #> 40           5.1         3.4          1.5         0.2     setosa #> 41           5.0         3.5          1.3         0.3     setosa #> 42           4.5         2.3          1.3         0.3     setosa #> 43           4.4         3.2          1.3         0.2     setosa #> 44           5.0         3.5          1.6         0.6     setosa #> 45           5.1         3.8          1.9         0.4     setosa #> 46           4.8         3.0          1.4         0.3     setosa #> 47           5.1         3.8          1.6         0.2     setosa #> 48           4.6         3.2          1.4         0.2     setosa #> 49           5.3         3.7          1.5         0.2     setosa #> 50           5.0         3.3          1.4         0.2     setosa #> 51           7.0         3.2          4.7         1.4 versicolor #> 52           6.4         3.2          4.5         1.5 versicolor #> 53           6.9         3.1          4.9         1.5 versicolor #> 54           5.5         2.3          4.0         1.3 versicolor #> 55           6.5         2.8          4.6         1.5 versicolor #> 56           5.7         2.8          4.5         1.3 versicolor #> 57           6.3         3.3          4.7         1.6 versicolor #> 58           4.9         2.4          3.3         1.0 versicolor #> 59           6.6         2.9          4.6         1.3 versicolor #> 60           5.2         2.7          3.9         1.4 versicolor #> 61           5.0         2.0          3.5         1.0 versicolor #> 62           5.9         3.0          4.2         1.5 versicolor #> 63           6.0         2.2          4.0         1.0 versicolor #> 64           6.1         2.9          4.7         1.4 versicolor #> 65           5.6         2.9          3.6         1.3 versicolor #> 66           6.7         3.1          4.4         1.4 versicolor #> 67           5.6         3.0          4.5         1.5 versicolor #> 68           5.8         2.7          4.1         1.0 versicolor #> 69           6.2         2.2          4.5         1.5 versicolor #> 70           5.6         2.5          3.9         1.1 versicolor #> 71           5.9         3.2          4.8         1.8 versicolor #> 72           6.1         2.8          4.0         1.3 versicolor #> 73           6.3         2.5          4.9         1.5 versicolor #> 74           6.1         2.8          4.7         1.2 versicolor #> 75           6.4         2.9          4.3         1.3 versicolor #> 76           6.6         3.0          4.4         1.4 versicolor #> 77           6.8         2.8          4.8         1.4 versicolor #> 78           6.7         3.0          5.0         1.7 versicolor #> 79           6.0         2.9          4.5         1.5 versicolor #> 80           5.7         2.6          3.5         1.0 versicolor #> 81           5.5         2.4          3.8         1.1 versicolor #> 82           5.5         2.4          3.7         1.0 versicolor #> 83           5.8         2.7          3.9         1.2 versicolor #> 84           6.0         2.7          5.1         1.6 versicolor #> 85           5.4         3.0          4.5         1.5 versicolor #> 86           6.0         3.4          4.5         1.6 versicolor #> 87           6.7         3.1          4.7         1.5 versicolor #> 88           6.3         2.3          4.4         1.3 versicolor #> 89           5.6         3.0          4.1         1.3 versicolor #> 90           5.5         2.5          4.0         1.3 versicolor #> 91           5.5         2.6          4.4         1.2 versicolor #> 92           6.1         3.0          4.6         1.4 versicolor #> 93           5.8         2.6          4.0         1.2 versicolor #> 94           5.0         2.3          3.3         1.0 versicolor #> 95           5.6         2.7          4.2         1.3 versicolor #> 96           5.7         3.0          4.2         1.2 versicolor #> 97           5.7         2.9          4.2         1.3 versicolor #> 98           6.2         2.9          4.3         1.3 versicolor #> 99           5.1         2.5          3.0         1.1 versicolor #> 100          5.7         2.8          4.1         1.3 versicolor #> 101          6.3         3.3          6.0         2.5  virginica #> 102          5.8         2.7          5.1         1.9  virginica #> 103          7.1         3.0          5.9         2.1  virginica #> 104          6.3         2.9          5.6         1.8  virginica #> 105          6.5         3.0          5.8         2.2  virginica #> 106          7.6         3.0          6.6         2.1  virginica #> 107          4.9         2.5          4.5         1.7  virginica #> 108          7.3         2.9          6.3         1.8  virginica #> 109          6.7         2.5          5.8         1.8  virginica #> 110          7.2         3.6          6.1         2.5  virginica #> 111          6.5         3.2          5.1         2.0  virginica #> 112          6.4         2.7          5.3         1.9  virginica #> 113          6.8         3.0          5.5         2.1  virginica #> 114          5.7         2.5          5.0         2.0  virginica #> 115          5.8         2.8          5.1         2.4  virginica #> 116          6.4         3.2          5.3         2.3  virginica #> 117          6.5         3.0          5.5         1.8  virginica #> 118          7.7         3.8          6.7         2.2  virginica #> 119          7.7         2.6          6.9         2.3  virginica #> 120          6.0         2.2          5.0         1.5  virginica #> 121          6.9         3.2          5.7         2.3  virginica #> 122          5.6         2.8          4.9         2.0  virginica #> 123          7.7         2.8          6.7         2.0  virginica #> 124          6.3         2.7          4.9         1.8  virginica #> 125          6.7         3.3          5.7         2.1  virginica #> 126          7.2         3.2          6.0         1.8  virginica #> 127          6.2         2.8          4.8         1.8  virginica #> 128          6.1         3.0          4.9         1.8  virginica #> 129          6.4         2.8          5.6         2.1  virginica #> 130          7.2         3.0          5.8         1.6  virginica #> 131          7.4         2.8          6.1         1.9  virginica #> 132          7.9         3.8          6.4         2.0  virginica #> 133          6.4         2.8          5.6         2.2  virginica #> 134          6.3         2.8          5.1         1.5  virginica #> 135          6.1         2.6          5.6         1.4  virginica #> 136          7.7         3.0          6.1         2.3  virginica #> 137          6.3         3.4          5.6         2.4  virginica #> 138          6.4         3.1          5.5         1.8  virginica #> 139          6.0         3.0          4.8         1.8  virginica #> 140          6.9         3.1          5.4         2.1  virginica #> 141          6.7         3.1          5.6         2.4  virginica #> 142          6.9         3.1          5.1         2.3  virginica #> 144          6.8         3.2          5.9         2.3  virginica #> 145          6.7         3.3          5.7         2.5  virginica #> 146          6.7         3.0          5.2         2.3  virginica #> 147          6.3         2.5          5.0         1.9  virginica #> 148          6.5         3.0          5.2         2.0  virginica #> 149          6.2         3.4          5.4         2.3  virginica #> 150          5.9         3.0          5.1         1.8  virginica  index <- which(duplicated(iris)) iris[-index, ] #>     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species #> 1            5.1         3.5          1.4         0.2     setosa #> 2            4.9         3.0          1.4         0.2     setosa #> 3            4.7         3.2          1.3         0.2     setosa #> 4            4.6         3.1          1.5         0.2     setosa #> 5            5.0         3.6          1.4         0.2     setosa #> 6            5.4         3.9          1.7         0.4     setosa #> 7            4.6         3.4          1.4         0.3     setosa #> 8            5.0         3.4          1.5         0.2     setosa #> 9            4.4         2.9          1.4         0.2     setosa #> 10           4.9         3.1          1.5         0.1     setosa #> 11           5.4         3.7          1.5         0.2     setosa #> 12           4.8         3.4          1.6         0.2     setosa #> 13           4.8         3.0          1.4         0.1     setosa #> 14           4.3         3.0          1.1         0.1     setosa #> 15           5.8         4.0          1.2         0.2     setosa #> 16           5.7         4.4          1.5         0.4     setosa #> 17           5.4         3.9          1.3         0.4     setosa #> 18           5.1         3.5          1.4         0.3     setosa #> 19           5.7         3.8          1.7         0.3     setosa #> 20           5.1         3.8          1.5         0.3     setosa #> 21           5.4         3.4          1.7         0.2     setosa #> 22           5.1         3.7          1.5         0.4     setosa #> 23           4.6         3.6          1.0         0.2     setosa #> 24           5.1         3.3          1.7         0.5     setosa #> 25           4.8         3.4          1.9         0.2     setosa #> 26           5.0         3.0          1.6         0.2     setosa #> 27           5.0         3.4          1.6         0.4     setosa #> 28           5.2         3.5          1.5         0.2     setosa #> 29           5.2         3.4          1.4         0.2     setosa #> 30           4.7         3.2          1.6         0.2     setosa #> 31           4.8         3.1          1.6         0.2     setosa #> 32           5.4         3.4          1.5         0.4     setosa #> 33           5.2         4.1          1.5         0.1     setosa #> 34           5.5         4.2          1.4         0.2     setosa #> 35           4.9         3.1          1.5         0.2     setosa #> 36           5.0         3.2          1.2         0.2     setosa #> 37           5.5         3.5          1.3         0.2     setosa #> 38           4.9         3.6          1.4         0.1     setosa #> 39           4.4         3.0          1.3         0.2     setosa #> 40           5.1         3.4          1.5         0.2     setosa #> 41           5.0         3.5          1.3         0.3     setosa #> 42           4.5         2.3          1.3         0.3     setosa #> 43           4.4         3.2          1.3         0.2     setosa #> 44           5.0         3.5          1.6         0.6     setosa #> 45           5.1         3.8          1.9         0.4     setosa #> 46           4.8         3.0          1.4         0.3     setosa #> 47           5.1         3.8          1.6         0.2     setosa #> 48           4.6         3.2          1.4         0.2     setosa #> 49           5.3         3.7          1.5         0.2     setosa #> 50           5.0         3.3          1.4         0.2     setosa #> 51           7.0         3.2          4.7         1.4 versicolor #> 52           6.4         3.2          4.5         1.5 versicolor #> 53           6.9         3.1          4.9         1.5 versicolor #> 54           5.5         2.3          4.0         1.3 versicolor #> 55           6.5         2.8          4.6         1.5 versicolor #> 56           5.7         2.8          4.5         1.3 versicolor #> 57           6.3         3.3          4.7         1.6 versicolor #> 58           4.9         2.4          3.3         1.0 versicolor #> 59           6.6         2.9          4.6         1.3 versicolor #> 60           5.2         2.7          3.9         1.4 versicolor #> 61           5.0         2.0          3.5         1.0 versicolor #> 62           5.9         3.0          4.2         1.5 versicolor #> 63           6.0         2.2          4.0         1.0 versicolor #> 64           6.1         2.9          4.7         1.4 versicolor #> 65           5.6         2.9          3.6         1.3 versicolor #> 66           6.7         3.1          4.4         1.4 versicolor #> 67           5.6         3.0          4.5         1.5 versicolor #> 68           5.8         2.7          4.1         1.0 versicolor #> 69           6.2         2.2          4.5         1.5 versicolor #> 70           5.6         2.5          3.9         1.1 versicolor #> 71           5.9         3.2          4.8         1.8 versicolor #> 72           6.1         2.8          4.0         1.3 versicolor #> 73           6.3         2.5          4.9         1.5 versicolor #> 74           6.1         2.8          4.7         1.2 versicolor #> 75           6.4         2.9          4.3         1.3 versicolor #> 76           6.6         3.0          4.4         1.4 versicolor #> 77           6.8         2.8          4.8         1.4 versicolor #> 78           6.7         3.0          5.0         1.7 versicolor #> 79           6.0         2.9          4.5         1.5 versicolor #> 80           5.7         2.6          3.5         1.0 versicolor #> 81           5.5         2.4          3.8         1.1 versicolor #> 82           5.5         2.4          3.7         1.0 versicolor #> 83           5.8         2.7          3.9         1.2 versicolor #> 84           6.0         2.7          5.1         1.6 versicolor #> 85           5.4         3.0          4.5         1.5 versicolor #> 86           6.0         3.4          4.5         1.6 versicolor #> 87           6.7         3.1          4.7         1.5 versicolor #> 88           6.3         2.3          4.4         1.3 versicolor #> 89           5.6         3.0          4.1         1.3 versicolor #> 90           5.5         2.5          4.0         1.3 versicolor #> 91           5.5         2.6          4.4         1.2 versicolor #> 92           6.1         3.0          4.6         1.4 versicolor #> 93           5.8         2.6          4.0         1.2 versicolor #> 94           5.0         2.3          3.3         1.0 versicolor #> 95           5.6         2.7          4.2         1.3 versicolor #> 96           5.7         3.0          4.2         1.2 versicolor #> 97           5.7         2.9          4.2         1.3 versicolor #> 98           6.2         2.9          4.3         1.3 versicolor #> 99           5.1         2.5          3.0         1.1 versicolor #> 100          5.7         2.8          4.1         1.3 versicolor #> 101          6.3         3.3          6.0         2.5  virginica #> 102          5.8         2.7          5.1         1.9  virginica #> 103          7.1         3.0          5.9         2.1  virginica #> 104          6.3         2.9          5.6         1.8  virginica #> 105          6.5         3.0          5.8         2.2  virginica #> 106          7.6         3.0          6.6         2.1  virginica #> 107          4.9         2.5          4.5         1.7  virginica #> 108          7.3         2.9          6.3         1.8  virginica #> 109          6.7         2.5          5.8         1.8  virginica #> 110          7.2         3.6          6.1         2.5  virginica #> 111          6.5         3.2          5.1         2.0  virginica #> 112          6.4         2.7          5.3         1.9  virginica #> 113          6.8         3.0          5.5         2.1  virginica #> 114          5.7         2.5          5.0         2.0  virginica #> 115          5.8         2.8          5.1         2.4  virginica #> 116          6.4         3.2          5.3         2.3  virginica #> 117          6.5         3.0          5.5         1.8  virginica #> 118          7.7         3.8          6.7         2.2  virginica #> 119          7.7         2.6          6.9         2.3  virginica #> 120          6.0         2.2          5.0         1.5  virginica #> 121          6.9         3.2          5.7         2.3  virginica #> 122          5.6         2.8          4.9         2.0  virginica #> 123          7.7         2.8          6.7         2.0  virginica #> 124          6.3         2.7          4.9         1.8  virginica #> 125          6.7         3.3          5.7         2.1  virginica #> 126          7.2         3.2          6.0         1.8  virginica #> 127          6.2         2.8          4.8         1.8  virginica #> 128          6.1         3.0          4.9         1.8  virginica #> 129          6.4         2.8          5.6         2.1  virginica #> 130          7.2         3.0          5.8         1.6  virginica #> 131          7.4         2.8          6.1         1.9  virginica #> 132          7.9         3.8          6.4         2.0  virginica #> 133          6.4         2.8          5.6         2.2  virginica #> 134          6.3         2.8          5.1         1.5  virginica #> 135          6.1         2.6          5.6         1.4  virginica #> 136          7.7         3.0          6.1         2.3  virginica #> 137          6.3         3.4          5.6         2.4  virginica #> 138          6.4         3.1          5.5         1.8  virginica #> 139          6.0         3.0          4.8         1.8  virginica #> 140          6.9         3.1          5.4         2.1  virginica #> 141          6.7         3.1          5.6         2.4  virginica #> 142          6.9         3.1          5.1         2.3  virginica #> 144          6.8         3.2          5.9         2.3  virginica #> 145          6.7         3.3          5.7         2.5  virginica #> 146          6.7         3.0          5.2         2.3  virginica #> 147          6.3         2.5          5.0         1.9  virginica #> 148          6.5         3.0          5.2         2.0  virginica #> 149          6.2         3.4          5.4         2.3  virginica #> 150          5.9         3.0          5.1         1.8  virginica  ### Removing rows with missing data  str(airquality) #> 'data.frame':\t153 obs. of  6 variables: #>  $ Ozone  : int  41 36 12 18 NA 28 23 19 8 NA ... #>  $ Solar.R: int  190 118 149 313 NA NA 299 99 19 194 ... #>  $ Wind   : num  7.4 8 12.6 11.5 14.3 14.9 8.6 13.8 20.1 8.6 ... #>  $ Temp   : int  67 72 74 62 56 66 65 59 61 69 ... #>  $ Month  : int  5 5 5 5 5 5 5 5 5 5 ... #>  $ Day    : int  1 2 3 4 5 6 7 8 9 10 ... complete.cases(airqualityx <- airquality[complete.cases(airquality), ] str(x) #> 'data.frame':\t111 obs. of  6 variables: #>  $ Ozone  : int  41 36 12 18 23 19 8 16 11 14 ... #>  $ Solar.R: int  190 118 149 313 299 99 19 256 290 274 ... #>  $ Wind   : num  7.4 8 12.6 11.5 8.6 13.8 20.1 9.7 9.2 10.9 ... #>  $ Temp   : int  67 72 74 62 65 59 61 69 66 68 ... #>  $ Month  : int  5 5 5 5 5 5 5 5 5 5 ... #>  $ Day    : int  1 2 3 4 7 8 9 12 13 14 ... x <- na.omit(airquality)    # Adding Calculated Fields to Data  ## Doing arithmetic on columns of a data frame  x <- iris$Sepal.Length / iris$Sepal.Width head(x) #> [1] 1.457143 1.633333 1.468750 1.483871 1.388889 1.384615  ## Using with and within to improve code readability  y <- with(iris, Sepal.Length / Sepal.Width) head(y) #> [1] 1.457143 1.633333 1.468750 1.483871 1.388889 1.384615 identical(x, y) #> [1] TRUE  iris$ratio <- iris$Sepal.Length / iris$Sepal.Width iris <- within(iris, ratio <- Sepal.Length / Sepal.Width) head(iris$ratio) #> [1] 1.457143 1.633333 1.468750 1.483871 1.388889 1.384615  ## Creating subgroups or bins of data  ### Using cut to create a fixed number of subgroups  head(state.x77) #>            Population Income Illiteracy Life Exp Murder HS Grad Frost   Area #> Alabama          3615   3624        2.1    69.05   15.1    41.3    20  50708 #> Alaska            365   6315        1.5    69.31   11.3    66.7   152 566432 #> Arizona          2212   4530        1.8    70.55    7.8    58.1    15 113417 #> Arkansas         2110   3378        1.9    70.66   10.1    39.9    65  51945 #> California      21198   5114        1.1    71.71   10.3    62.6    20 156361 #> Colorado         2541   4884        0.7    72.06    6.8    63.9   166 103766 frost <- state.x77[, \"Frost\"] head(frost, 5) #>    Alabama     Alaska    Arizona   Arkansas California  #>         20        152         15         65         20  cut(frost, 3, include.lowest=TRUE) #>  [1] [-0.188,62.7] (125,188]     [-0.188,62.7] (62.7,125]    [-0.188,62.7] #>  [6] (125,188]     (125,188]     (62.7,125]    [-0.188,62.7] [-0.188,62.7] #> [11] [-0.188,62.7] (125,188]     (125,188]     (62.7,125]    (125,188]     #> [16] (62.7,125]    (62.7,125]    [-0.188,62.7] (125,188]     (62.7,125]    #> [21] (62.7,125]    (62.7,125]    (125,188]     [-0.188,62.7] (62.7,125]    #> [26] (125,188]     (125,188]     (125,188]     (125,188]     (62.7,125]    #> [31] (62.7,125]    (62.7,125]    (62.7,125]    (125,188]     (62.7,125]    #> [36] (62.7,125]    [-0.188,62.7] (125,188]     (125,188]     (62.7,125]    #> [41] (125,188]     (62.7,125]    [-0.188,62.7] (125,188]     (125,188]     #> [46] (62.7,125]    [-0.188,62.7] (62.7,125]    (125,188]     (125,188]     #> Levels: [-0.188,62.7] (62.7,125] (125,188]  ### Adding labels to cut  cut(frost, 3, include.lowest=TRUE, labels=c(\"Low\", \"Med\", \"High\")) #>  [1] Low  High Low  Med  Low  High High Med  Low  Low  Low  High High Med  High #> [16] Med  Med  Low  High Med  Med  Med  High Low  Med  High High High High Med  #> [31] Med  Med  Med  High Med  Med  Low  High High Med  High Med  Low  High High #> [46] Med  Low  Med  High High #> Levels: Low Med High  ### Using table to count the number of observations  x <- cut(frost, 3, include.lowest=TRUE, labels=c(\"Low\", \"Med\", \"High\")) table(x) #> x #>  Low  Med High  #>   11   19   20  x #>  [1] Low  High Low  Med  Low  High High Med  Low  Low  Low  High High Med  High #> [16] Med  Med  Low  High Med  Med  Med  High Low  Med  High High High High Med  #> [31] Med  Med  Med  High Med  Med  Low  High High Med  High Med  Low  High High #> [46] Med  Low  Med  High High #> Levels: Low Med High   # Combining and Merging Data Sets  ## Creating sample data to illustrate merging  all.states <- as.data.frame(state.x77) all.states$Name <- rownames(state.x77) rownames(all.states) <- NULL str(all.states) #> 'data.frame':\t50 obs. of  9 variables: #>  $ Population: num  3615 365 2212 2110 21198 ... #>  $ Income    : num  3624 6315 4530 3378 5114 ... #>  $ Illiteracy: num  2.1 1.5 1.8 1.9 1.1 0.7 1.1 0.9 1.3 2 ... #>  $ Life Exp  : num  69 69.3 70.5 70.7 71.7 ... #>  $ Murder    : num  15.1 11.3 7.8 10.1 10.3 6.8 3.1 6.2 10.7 13.9 ... #>  $ HS Grad   : num  41.3 66.7 58.1 39.9 62.6 63.9 56 54.6 52.6 40.6 ... #>  $ Frost     : num  20 152 15 65 20 166 139 103 11 60 ... #>  $ Area      : num  50708 566432 113417 51945 156361 ... #>  $ Name      : chr  \"Alabama\" \"Alaska\" \"Arizona\" \"Arkansas\" ...  ### Creating a subset of cold states  cold.states <- all.states[all.states$Frost>150, c(\"Name\", \"Frost\")] cold.states #>             Name Frost #> 2         Alaska   152 #> 6       Colorado   166 #> 19         Maine   161 #> 23     Minnesota   160 #> 26       Montana   155 #> 28        Nevada   188 #> 29 New Hampshire   174 #> 34  North Dakota   186 #> 41  South Dakota   172 #> 45       Vermont   168 #> 50       Wyoming   173  ### Creating a subset of large states  large.states <- all.states[all.states$Area>=100000, c(\"Name\", \"Area\")] large.states #>          Name   Area #> 2      Alaska 566432 #> 3     Arizona 113417 #> 5  California 156361 #> 6    Colorado 103766 #> 26    Montana 145587 #> 28     Nevada 109889 #> 31 New Mexico 121412 #> 43      Texas 262134  ## Using the merge() function  ### Using merge to find the intersection of data  merge(cold.states, large.states) #>       Name Frost   Area #> 1   Alaska   152 566432 #> 2 Colorado   166 103766 #> 3  Montana   155 145587 #> 4   Nevada   188 109889  ### Understanding the different types of merge  merge(cold.states, large.states, all=TRUE) #>             Name Frost   Area #> 1         Alaska   152 566432 #> 2        Arizona    NA 113417 #> 3     California    NA 156361 #> 4       Colorado   166 103766 #> 5          Maine   161     NA #> 6      Minnesota   160     NA #> 7        Montana   155 145587 #> 8         Nevada   188 109889 #> 9  New Hampshire   174     NA #> 10    New Mexico    NA 121412 #> 11  North Dakota   186     NA #> 12  South Dakota   172     NA #> 13         Texas    NA 262134 #> 14       Vermont   168     NA #> 15       Wyoming   173     NA   ## Working with lookup tables  ### Finding a match  index <- match(cold.states$Name, large.states$Name) index #>  [1]  1  4 NA NA  5  6 NA NA NA NA NA  large.states[na.omit(index), ] #>        Name   Area #> 2    Alaska 566432 #> 6  Colorado 103766 #> 26  Montana 145587 #> 28   Nevada 109889  ### Making sense of %in%  index <- cold.states$Name %in% large.states$Name index #>  [1]  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE !is.na(match(cold.states$Name,large.states$Name)) #>  [1]  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE cold.states[index, ] #>        Name Frost #> 2    Alaska   152 #> 6  Colorado   166 #> 26  Montana   155 #> 28   Nevada   188  # Sorting and Ordering Data  some.states <- data.frame(      Region = state.region,      state.x77)  some.states <- some.states[1:10, 1:3] some.states #>                Region Population Income #> Alabama         South       3615   3624 #> Alaska           West        365   6315 #> Arizona          West       2212   4530 #> Arkansas        South       2110   3378 #> California       West      21198   5114 #> Colorado         West       2541   4884 #> Connecticut Northeast       3100   5348 #> Delaware        South        579   4809 #> Florida         South       8277   4815 #> Georgia         South       4931   4091  ## Sorting vectors  ### Sorting a vector in ascending order  sort(some.states$Population) #>  [1]   365   579  2110  2212  2541  3100  3615  4931  8277 21198  ### Sorting a vector in decreasing order  sort(some.states$Population, decreasing=TRUE) #>  [1] 21198  8277  4931  3615  3100  2541  2212  2110   579   365  ## Sorting data frames  ### Getting the order  order.pop <- order(some.states$Population) order.pop #>  [1]  2  8  4  3  6  7  1 10  9  5  some.states$Population[order.pop] #>  [1]   365   579  2110  2212  2541  3100  3615  4931  8277 21198  ## Sorting a data frame in ascending order  some.states[order.pop, ] #>                Region Population Income #> Alaska           West        365   6315 #> Delaware        South        579   4809 #> Arkansas        South       2110   3378 #> Arizona          West       2212   4530 #> Colorado         West       2541   4884 #> Connecticut Northeast       3100   5348 #> Alabama         South       3615   3624 #> Georgia         South       4931   4091 #> Florida         South       8277   4815 #> California       West      21198   5114 order(some.states$Population) #>  [1]  2  8  4  3  6  7  1 10  9  5 order(some.states$Population, decreasing=TRUE) #>  [1]  5  9 10  1  7  6  3  4  8  2  some.states[order(some.states$Population, decreasing=TRUE), ] #>                Region Population Income #> California       West      21198   5114 #> Florida         South       8277   4815 #> Georgia         South       4931   4091 #> Alabama         South       3615   3624 #> Connecticut Northeast       3100   5348 #> Colorado         West       2541   4884 #> Arizona          West       2212   4530 #> Arkansas        South       2110   3378 #> Delaware        South        579   4809 #> Alaska           West        365   6315  ### Sorting on more than one column  index <- with(some.states, order(Region, Population)) some.states[index, ] #>                Region Population Income #> Connecticut Northeast       3100   5348 #> Delaware        South        579   4809 #> Arkansas        South       2110   3378 #> Alabama         South       3615   3624 #> Georgia         South       4931   4091 #> Florida         South       8277   4815 #> Alaska           West        365   6315 #> Arizona          West       2212   4530 #> Colorado         West       2541   4884 #> California       West      21198   5114  ### Sorting multiple columns in mixed order index <- order(-xtfrm(some.states$Region), some.states$Population) some.states[index, ] #>                Region Population Income #> Alaska           West        365   6315 #> Arizona          West       2212   4530 #> Colorado         West       2541   4884 #> California       West      21198   5114 #> Delaware        South        579   4809 #> Arkansas        South       2110   3378 #> Alabama         South       3615   3624 #> Georgia         South       4931   4091 #> Florida         South       8277   4815 #> Connecticut Northeast       3100   5348  # Traversing Your Data with the Apply Functions  ## Using the apply() function to summarize arrays  str(Titanic) #>  'table' num [1:4, 1:2, 1:2, 1:2] 0 0 35 0 0 0 17 0 118 154 ... #>  - attr(*, \"dimnames\")=List of 4 #>   ..$ Class   : chr [1:4] \"1st\" \"2nd\" \"3rd\" \"Crew\" #>   ..$ Sex     : chr [1:2] \"Male\" \"Female\" #>   ..$ Age     : chr [1:2] \"Child\" \"Adult\" #>   ..$ Survived: chr [1:2] \"No\" \"Yes\" apply(Titanic, 1, sum) #>  1st  2nd  3rd Crew  #>  325  285  706  885  apply(Titanic, 3, sum) #> Child Adult  #>   109  2092  apply(Titanic, c(3, 4), sum) #>        Survived #> Age       No Yes #>   Child   52  57 #>   Adult 1438 654  ## Using lapply() and sapply() to traverse a list or data frame  lapply(iris, class) #> $Sepal.Length #> [1] \"numeric\" #>  #> $Sepal.Width #> [1] \"numeric\" #>  #> $Petal.Length #> [1] \"numeric\" #>  #> $Petal.Width #> [1] \"numeric\" #>  #> $Species #> [1] \"factor\" #>  #> $ratio #> [1] \"numeric\" #>  sapply(iris, class) #> Sepal.Length  Sepal.Width Petal.Length  Petal.Width      Species        ratio  #>    \"numeric\"    \"numeric\"    \"numeric\"    \"numeric\"     \"factor\"    \"numeric\"  sapply(iris, function(x) ifelse(is.numeric(x), mean(x), NA)) #> Sepal.Length  Sepal.Width Petal.Length  Petal.Width      Species        ratio  #>     5.843333     3.057333     3.758000     1.199333           NA     1.953681   ## Using tapply() to create tabular summaries  tapply(iris$Sepal.Length, iris$Species, mean) #>     setosa versicolor  virginica  #>      5.006      5.936      6.588  with(iris, tapply(Sepal.Length, Species, mean)) #>     setosa versicolor  virginica  #>      5.006      5.936      6.588   ### Using tapply() to create higher-dimensional tables  str(mtcars) #> 'data.frame':\t32 obs. of  11 variables: #>  $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ... #>  $ cyl : num  6 6 4 6 8 6 8 4 4 6 ... #>  $ disp: num  160 160 108 258 360 ... #>  $ hp  : num  110 110 93 110 175 105 245 62 95 123 ... #>  $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ... #>  $ wt  : num  2.62 2.88 2.32 3.21 3.44 ... #>  $ qsec: num  16.5 17 18.6 19.4 17 ... #>  $ vs  : num  0 0 1 1 0 1 0 1 1 1 ... #>  $ am  : num  1 1 1 0 0 0 0 0 0 0 ... #>  $ gear: num  4 4 4 3 3 3 3 4 4 4 ... #>  $ carb: num  4 4 1 1 2 1 4 2 2 4 ... cars <- within(mtcars,     am <- factor(am, levels=0:1, labels=c(\"Automatic\", \"Manual\")) )  with(cars, tapply(mpg, am, mean)) #> Automatic    Manual  #>  17.14737  24.39231  with(cars, tapply(mpg, list(gear, am), mean)) #>   Automatic Manual #> 3  16.10667     NA #> 4  21.05000 26.275 #> 5        NA 21.380  ### Using aggregate()  with(cars, aggregate(mpg, list(gear=gear, am=am), mean)) #>   gear        am        x #> 1    3 Automatic 16.10667 #> 2    4 Automatic 21.05000 #> 3    4    Manual 26.27500 #> 4    5    Manual 21.38000  # Getting to Know the Formula Interface   aggregate(mpg ~ gear + am, data=cars, mean) #>   gear        am      mpg #> 1    3 Automatic 16.10667 #> 2    4 Automatic 21.05000 #> 3    4    Manual 26.27500 #> 4    5    Manual 21.38000  aov(mpg ~ gear + am, data=cars) #> Call: #>    aov(formula = mpg ~ gear + am, data = cars) #>  #> Terms: #>                     gear       am Residuals #> Sum of Squares  259.7492 145.4497  720.8483 #> Deg. of Freedom        1        1        29 #>  #> Residual standard error: 4.985663 #> Estimated effects may be unbalanced  library(lattice) xyplot(mpg ~ gear + am, data=cars)    # Whipping Your Data into Shape   ## Understanding data in long and wide format   ## Getting started with the reshape2 package  if (FALSE) { install.packages(\"reshape2\") } library(\"reshape2\")  goals <- data.frame(     Game = c(\"1st\", \"2nd\", \"3rd\", \"4th\"),     Venue = c(\"Bruges\", \"Ghent\", \"Ghent\", \"Bruges\"),     Granny = c(12, 4, 5, 6),     Geraldine = c(5, 4, 2, 4),     Gertrude = c(11, 5, 6, 7) )  ## Melting data to long format  mgoals <- melt(goals) #> Using Game, Venue as id variables mgoals <- melt(goals, id.vars=c(\"Game\", \"Venue\")) mgoals #>    Game  Venue  variable value #> 1   1st Bruges    Granny    12 #> 2   2nd  Ghent    Granny     4 #> 3   3rd  Ghent    Granny     5 #> 4   4th Bruges    Granny     6 #> 5   1st Bruges Geraldine     5 #> 6   2nd  Ghent Geraldine     4 #> 7   3rd  Ghent Geraldine     2 #> 8   4th Bruges Geraldine     4 #> 9   1st Bruges  Gertrude    11 #> 10  2nd  Ghent  Gertrude     5 #> 11  3rd  Ghent  Gertrude     6 #> 12  4th Bruges  Gertrude     7  ## Casting data to wide format  dcast(mgoals,  Venue + Game ~ variable, sum) #>    Venue Game Granny Geraldine Gertrude #> 1 Bruges  1st     12         5       11 #> 2 Bruges  4th      6         4        7 #> 3  Ghent  2nd      4         4        5 #> 4  Ghent  3rd      5         2        6 dcast(mgoals, variable ~ Venue , sum) #>    variable Bruges Ghent #> 1    Granny     18     9 #> 2 Geraldine      9     6 #> 3  Gertrude     18    11 dcast(mgoals,  Venue ~ variable , sum) #>    Venue Granny Geraldine Gertrude #> 1 Bruges     18         9       18 #> 2  Ghent      9         6       11  dcast(mgoals,  Venue + variable ~ Game , sum) #>    Venue  variable 1st 2nd 3rd 4th #> 1 Bruges    Granny  12   0   0   6 #> 2 Bruges Geraldine   5   0   0   4 #> 3 Bruges  Gertrude  11   0   0   7 #> 4  Ghent    Granny   0   4   5   0 #> 5  Ghent Geraldine   0   4   2   0 #> 6  Ghent  Gertrude   0   5   6   0  library(ggplot2) ggplot(mgoals, aes(x=variable, y=value, fill=Game)) + geom_bar(stat=\"identity\")"},{"path":"/reference/ch14.html","id":null,"dir":"Reference","previous_headings":"","what":"Print examples of chapter 14 of 'R for Dummies'. — ch14","title":"Print examples of chapter 14 of 'R for Dummies'. — ch14","text":"print listing examples chapter, use ch14(). run examples ch14(), use example(ch14).","code":""},{"path":"/reference/ch14.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print examples of chapter 14 of 'R for Dummies'. — ch14","text":"","code":"ch14()"},{"path":[]},{"path":"/reference/ch14.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print examples of chapter 14 of 'R for Dummies'. — ch14","text":"","code":"# Chapter 14 # Summarizing Data  # Starting with the Right Data  ## Using factors or numeric data  ## Counting unique values  sapply(mtcars, function(x) length(unique(x))) #>  mpg  cyl disp   hp drat   wt qsec   vs   am gear carb  #>   25    3   27   22   22   29   30    2    2    3    6   ## Preparing the data  cars <- mtcars[c(1,2,9,10)] cars$gear <- ordered(cars$gear) cars$am <- factor(cars$am, labels=c('auto', 'manual')) str(cars) #> 'data.frame':\t32 obs. of  4 variables: #>  $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ... #>  $ cyl : num  6 6 4 6 8 6 8 4 4 6 ... #>  $ am  : Factor w/ 2 levels \"auto\",\"manual\": 2 2 2 1 1 1 1 1 1 1 ... #>  $ gear: Ord.factor w/ 3 levels \"3\"<\"4\"<\"5\": 2 2 2 1 1 1 1 2 2 2 ...  # Describing Continuous Variables  ## Talking about the center of your data  mean(cars$mpg) #> [1] 20.09062 median(cars$cyl) #> [1] 6  ## Describing the variation sd(cars$mpg) #> [1] 6.026948  ## Checking the quantiles  ### Calculating the range range(cars$mpg) #> [1] 10.4 33.9  ### Calculating the quantiles quantile(cars$mpg) #>     0%    25%    50%    75%   100%  #> 10.400 15.425 19.200 22.800 33.900   ### Getting on speed with the quantile function quantile(cars$mpg, probs=c(0.05, 0.95)) #>     5%    95%  #> 11.995 31.300   # Describing Categories  ## Counting appearances  ### Creating a table amtable <- table(cars$am) amtable #>  #>   auto manual  #>     19     13   ### Working with tables  ## Calculating proportions amtable/sum(amtable) #>  #>    auto  manual  #> 0.59375 0.40625  prop.table(amtable) #>  #>    auto  manual  #> 0.59375 0.40625   ## Finding the center id <- amtable == max(amtable) names(amtable)[id] #> [1] \"auto\"  # Describing Distributions  ## Plotting histograms  ### Making the plot hist(cars$mpg, col='grey')   ### Playing with breaks hist(cars$mpg, breaks=c(5,15,25,35))   ## Using frequencies or densities  ### Creating a density plot  mpgdens <- density(cars$mpg) plot(mpgdens)   ### Plotting densities in a histogram hist(cars$mpg, col='grey', freq=FALSE) lines(mpgdens)   # Describing Multiple Variables  ## Summarizing a complete dataset  ### Getting the output summary(cars) #>       mpg             cyl             am     gear   #>  Min.   :10.40   Min.   :4.000   auto  :19   3:15   #>  1st Qu.:15.43   1st Qu.:4.000   manual:13   4:12   #>  Median :19.20   Median :6.000               5: 5   #>  Mean   :20.09   Mean   :6.188                      #>  3rd Qu.:22.80   3rd Qu.:8.000                      #>  Max.   :33.90   Max.   :8.000                       ### Fixing a problem  cars$cyl <- as.factor(cars$cyl)  ## Plotting quantiles for subgroups  boxplot(mpg ~ cyl, data=cars)   ## Tracking correlations  names(iris) #> [1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"       ### Looking at relations plot(iris[-5])   ### Getting the numbers  with(iris, cor(Petal.Width, Petal.Length)) #> [1] 0.9628654  ### Calculating correlations for multiple variables  iris.cor <- cor(iris[-5]) str(iris.cor) #>  num [1:4, 1:4] 1 -0.118 0.872 0.818 -0.118 ... #>  - attr(*, \"dimnames\")=List of 2 #>   ..$ : chr [1:4] \"Sepal.Length\" \"Sepal.Width\" \"Petal.Length\" \"Petal.Width\" #>   ..$ : chr [1:4] \"Sepal.Length\" \"Sepal.Width\" \"Petal.Length\" \"Petal.Width\"  iris.cor['Petal.Width', 'Petal.Length'] #> [1] 0.9628654  ### Dealing with missing values  # Working with Tables  ## Creating a two-way table  ### Creating a table from two variables  with(cars, table(am, gear)) #>         gear #> am        3  4  5 #>   auto   15  4  0 #>   manual  0  8  5  ### Creating tables from a matrix  trial <- matrix(c(34,11,9,32), ncol=2) colnames(trial) <- c('sick', 'healthy') rownames(trial) <- c('risk', 'no_risk') trial.table <- as.table(trial) trial.table #>         sick healthy #> risk      34       9 #> no_risk   11      32  ### Extracting the numbers  trial.table['risk', 'sick'] #> [1] 34  ##Converting tables to a data frame  trial.df <- as.data.frame(trial) str(trial.df) #> 'data.frame':\t2 obs. of  2 variables: #>  $ sick   : num  34 11 #>  $ healthy: num  9 32  trial.table.df <- as.data.frame(trial.table) str(trial.table.df) #> 'data.frame':\t4 obs. of  3 variables: #>  $ Var1: Factor w/ 2 levels \"risk\",\"no_risk\": 1 2 1 2 #>  $ Var2: Factor w/ 2 levels \"sick\",\"healthy\": 1 1 2 2 #>  $ Freq: num  34 11 9 32  ## Looking at margins and proportions  ### Adding margins to the table  addmargins(trial.table) #>         sick healthy Sum #> risk      34       9  43 #> no_risk   11      32  43 #> Sum       45      41  86 addmargins(trial.table,margin=2) #>         sick healthy Sum #> risk      34       9  43 #> no_risk   11      32  43  ### Calculating proportions  prop.table(trial.table) #>              sick   healthy #> risk    0.3953488 0.1046512 #> no_risk 0.1279070 0.3720930  ### Calculating proportions over columns and rows prop.table(trial.table, margin=1) #>              sick   healthy #> risk    0.7906977 0.2093023 #> no_risk 0.2558140 0.7441860"},{"path":"/reference/ch15.html","id":null,"dir":"Reference","previous_headings":"","what":"Print examples of chapter 15 of 'R for Dummies'. — ch15","title":"Print examples of chapter 15 of 'R for Dummies'. — ch15","text":"print listing examples chapter, use ch15(). run examples ch15(), use example(ch15).","code":""},{"path":"/reference/ch15.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print examples of chapter 15 of 'R for Dummies'. — ch15","text":"","code":"ch15()"},{"path":[]},{"path":"/reference/ch15.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print examples of chapter 15 of 'R for Dummies'. — ch15","text":"","code":"# Chapter 15 # Testing Differences and Relations  # Taking a Closer Look at Distributions  ## Observing beavers str(beaver2) #> 'data.frame':\t100 obs. of  4 variables: #>  $ day  : num  307 307 307 307 307 307 307 307 307 307 ... #>  $ time : num  930 940 950 1000 1010 1020 1030 1040 1050 1100 ... #>  $ temp : num  36.6 36.7 36.9 37.1 37.2 ... #>  $ activ: num  0 0 0 0 0 0 0 0 0 0 ...  ## Testing normality graphically library(lattice) histogram(~temp | factor(activ), data=beaver2)   ## Using quantile plots  ### Comparing two samples  qqplot(beaver2$temp[beaver2$activ==1],        beaver2$temp[beaver2$activ==0])   ### Using a QQ plot to check for normality  qqnorm( beaver2$temp[beaver2$activ==0], main='Inactive') qqline( beaver2$temp[beaver2$activ==0] )   ## Testing normality in a formal way  shapiro.test(beaver2$temp) #>  #> \tShapiro-Wilk normality test #>  #> data:  beaver2$temp #> W = 0.93336, p-value = 7.764e-05 #>  result <- shapiro.test(beaver2$temp) result$p.value #> [1] 7.763623e-05  with(beaver2, tapply(temp, activ, shapiro.test)) #> $`0` #>  #> \tShapiro-Wilk normality test #>  #> data:  X[[i]] #> W = 0.95427, p-value = 0.1231 #>  #>  #> $`1` #>  #> \tShapiro-Wilk normality test #>  #> data:  X[[i]] #> W = 0.98326, p-value = 0.5583 #>  #>   # Comparing Two Samples  ## Testing differences  ### Carrying out a t-test  t.test(temp ~ activ, data=beaver2) #>  #> \tWelch Two Sample t-test #>  #> data:  temp by activ #> t = -18.548, df = 80.852, p-value < 2.2e-16 #> alternative hypothesis: true difference in means between group 0 and group 1 is not equal to 0 #> 95 percent confidence interval: #>  -0.8927106 -0.7197342 #> sample estimates: #> mean in group 0 mean in group 1  #>        37.09684        37.90306  #>    activetemp <- beaver2$temp[beaver2$activ==1] inactivetemp <- beaver2$temp[beaver2$activ==0] t.test(activetemp, inactivetemp) #>  #> \tWelch Two Sample t-test #>  #> data:  activetemp and inactivetemp #> t = 18.548, df = 80.852, p-value < 2.2e-16 #> alternative hypothesis: true difference in means is not equal to 0 #> 95 percent confidence interval: #>  0.7197342 0.8927106 #> sample estimates: #> mean of x mean of y  #>  37.90306  37.09684  #>   ### Dropping assumptions  wilcox.test(temp ~ activ, data=beaver2) #>  #> \tWilcoxon rank sum test with continuity correction #>  #> data:  temp by activ #> W = 15, p-value < 2.2e-16 #> alternative hypothesis: true location shift is not equal to 0 #>   ### Testing direction  ## Comparing paired data  t.test(extra ~ group, data=sleep, paired=TRUE) #>  #> \tPaired t-test #>  #> data:  extra by group #> t = -4.0621, df = 9, p-value = 0.002833 #> alternative hypothesis: true difference in means is not equal to 0 #> 95 percent confidence interval: #>  -2.4598858 -0.7001142 #> sample estimates: #> mean of the differences  #>                   -1.58  #>   # Testing Counts and Proportions  ## Checking out proportions survivors <- matrix(c(1781,1443,135,47), ncol=2) colnames(survivors) <- c('survived','died') rownames(survivors) <- c('no seat belt','seat belt') survivors #>              survived died #> no seat belt     1781  135 #> seat belt        1443   47  result.prop <- prop.test(survivors) result.prop #>  #> \t2-sample test for equality of proportions with continuity correction #>  #> data:  survivors #> X-squared = 24.333, df = 1, p-value = 8.105e-07 #> alternative hypothesis: two.sided #> 95 percent confidence interval: #>  -0.05400606 -0.02382527 #> sample estimates: #>    prop 1    prop 2  #> 0.9295407 0.9684564  #>   ## Analyzing tables  ### Testing contingency of tables chisq.test(survivors) #>  #> \tPearson's Chi-squared test with Yates' continuity correction #>  #> data:  survivors #> X-squared = 24.333, df = 1, p-value = 8.105e-07 #>   ### Testing tables with more than two columns str(HairEyeColor) #>  'table' num [1:4, 1:4, 1:2] 32 53 10 3 11 50 10 30 10 25 ... #>  - attr(*, \"dimnames\")=List of 3 #>   ..$ Hair: chr [1:4] \"Black\" \"Brown\" \"Red\" \"Blond\" #>   ..$ Eye : chr [1:4] \"Brown\" \"Blue\" \"Hazel\" \"Green\" #>   ..$ Sex : chr [1:2] \"Male\" \"Female\" HairEyeMargin <- margin.table(HairEyeColor, margin=c(1,2)) HairEyeMargin #>        Eye #> Hair    Brown Blue Hazel Green #>   Black    68   20    15     5 #>   Brown   119   84    54    29 #>   Red      26   17    14    14 #>   Blond     7   94    10    16  chisq.test(HairEyeMargin) #>  #> \tPearson's Chi-squared test #>  #> data:  HairEyeMargin #> X-squared = 138.29, df = 9, p-value < 2.2e-16 #>   ## Extracting test results str(result) #> List of 4 #>  $ statistic: Named num 0.933 #>   ..- attr(*, \"names\")= chr \"W\" #>  $ p.value  : num 7.76e-05 #>  $ method   : chr \"Shapiro-Wilk normality test\" #>  $ data.name: chr \"beaver2$temp\" #>  - attr(*, \"class\")= chr \"htest\" t.test(temp ~ activ, data=beaver2)$p.value #> [1] 7.269112e-31  # Working with Models  ## Analyzing variances str(InsectSprays) #> 'data.frame':\t72 obs. of  2 variables: #>  $ count: num  10 7 20 14 14 12 10 23 17 20 ... #>  $ spray: Factor w/ 6 levels \"A\",\"B\",\"C\",\"D\",..: 1 1 1 1 1 1 1 1 1 1 ...  ### Building the model AOVModel <- aov(count ~ spray, data=InsectSprays)  ### Looking at the object AOVModel #> Call: #>    aov(formula = count ~ spray, data = InsectSprays) #>  #> Terms: #>                    spray Residuals #> Sum of Squares  2668.833  1015.167 #> Deg. of Freedom        5        66 #>  #> Residual standard error: 3.921902 #> Estimated effects may be unbalanced  ## Evaluating the differences summary(AOVModel) #>             Df Sum Sq Mean Sq F value Pr(>F)     #> spray        5   2669   533.8    34.7 <2e-16 *** #> Residuals   66   1015    15.4                    #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1  ### Checking the model tables model.tables(AOVModel, type='effects') #> Tables of effects #>  #>  spray  #> spray #>      A      B      C      D      E      F  #>  5.000  5.833 -7.417 -4.583 -6.000  7.167   ### Looking at the individual differences Comparisons <- TukeyHSD(AOVModel) Comparisons$spray['D-C',] #>       diff        lwr        upr      p adj  #>  2.8333333 -1.8660752  7.5327418  0.4920707   ### Plotting the differences plot(Comparisons, las=1)   ## Modeling linear relations  ### Building a linear model Model <- lm(mpg ~ wt, data=mtcars)  ### Extracting information from the model  coef.Model <- coef(Model) coef.Model #> (Intercept)          wt  #>   37.285126   -5.344472   plot(mpg ~ wt, data = mtcars) abline(a=coef.Model[1], b=coef.Model[2])   ## Evaluating linear models  ### Summarizing the model Model.summary <- summary(Model) Model.summary #>  #> Call: #> lm(formula = mpg ~ wt, data = mtcars) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -4.5432 -2.3647 -0.1252  1.4096  6.8727  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  37.2851     1.8776  19.858  < 2e-16 *** #> wt           -5.3445     0.5591  -9.559 1.29e-10 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 3.046 on 30 degrees of freedom #> Multiple R-squared:  0.7528,\tAdjusted R-squared:  0.7446  #> F-statistic: 91.38 on 1 and 30 DF,  p-value: 1.294e-10 #>   coef(Model.summary) #>              Estimate Std. Error   t value     Pr(>|t|) #> (Intercept) 37.285126   1.877627 19.857575 8.241799e-19 #> wt          -5.344472   0.559101 -9.559044 1.293959e-10  ### Testing the impact of model terms Model.anova <- anova(Model) Model.anova #> Analysis of Variance Table #>  #> Response: mpg #>           Df Sum Sq Mean Sq F value    Pr(>F)     #> wt         1 847.73  847.73  91.375 1.294e-10 *** #> Residuals 30 278.32    9.28                       #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1  Model.anova['wt','Pr(>F)'] #> [1] 1.293959e-10  ## Predicting new values  ### Getting the values new.cars <- data.frame(wt=c(1.7, 2.4, 3.6)) predict(Model, newdata=new.cars) #>        1        2        3  #> 28.19952 24.45839 18.04503   ### Having confidence in your predictions predict(Model, newdata=new.cars, interval='confidence') #>        fit      lwr      upr #> 1 28.19952 26.14755 30.25150 #> 2 24.45839 23.01617 25.90062 #> 3 18.04503 16.86172 19.22834 predict(Model,newdata=new.cars, interval='prediction') #>        fit      lwr      upr #> 1 28.19952 21.64930 34.74975 #> 2 24.45839 18.07287 30.84392 #> 3 18.04503 11.71296 24.37710"},{"path":"/reference/ch16.html","id":null,"dir":"Reference","previous_headings":"","what":"Print examples of chapter 16 of 'R for Dummies'. — ch16","title":"Print examples of chapter 16 of 'R for Dummies'. — ch16","text":"print listing examples chapter, use ch16(). run examples ch16(), use example(ch16).","code":""},{"path":"/reference/ch16.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print examples of chapter 16 of 'R for Dummies'. — ch16","text":"","code":"ch16()"},{"path":[]},{"path":"/reference/ch16.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print examples of chapter 16 of 'R for Dummies'. — ch16","text":"","code":"# Chapter 16 - Using Base Graphics  # Creating Different Types of Plots   ## Getting an overview of plot  large.islands <- head(sort(islands, decreasing=TRUE), 10)  plot(large.islands, main=\"Land area of continents and islands\",    ylab=\"Land area in square miles\") text(large.islands, labels=names(large.islands), adj=c(0.5, 1))    ## Adding points and lines to a plot  plot(faithful)  ## Adding points  short.eruptions <- with(faithful, faithful[eruptions < 3, ])  plot(faithful) points(short.eruptions, col=\"red\", pch=19)   ## Changing the shape of points  ## Changing the color  head(colors(), 10) #>  [1] \"white\"         \"aliceblue\"     \"antiquewhite\"  \"antiquewhite1\" #>  [5] \"antiquewhite2\" \"antiquewhite3\" \"antiquewhite4\" \"aquamarine\"    #>  [9] \"aquamarine1\"   \"aquamarine2\"    ## Adding lines to a plot  fit <- lm(waiting~eruptions, data=faithful)  plot(faithful) lines(faithful$eruptions, fitted(fit), col=\"blue\") abline(v=3, col=\"purple\")  abline(h=mean(faithful$waiting)) abline(a=coef(fit)[1], b=coef(fit)[2]) abline(fit, col = \"red\")   # Different plot types  plot(LakeHuron, type=\"l\", main='type=\"l\"')  plot(LakeHuron, type=\"p\", main='type=p\"')  plot(LakeHuron, type=\"b\", main='type=\"b\"')    x <- seq(0.5, 1.5, 0.25) y <- rep(1, length(x)) plot(x, y, type=\"n\") points(x, y)   with(mtcars, plot(mpg, disp))  with(mtcars, boxplot(disp, mpg))  with(mtcars, hist(mpg))   # Controlling Plot Options and Arguments  ## Adding titles and axis labels  plot(faithful,    main = \"Eruptions of Old Faithful\",    xlab = \"Eruption time (min)\",    ylab = \"Waiting time to next eruption (min)\")    ## Changing plot options  ### The axes label style  plot(faithful, las=1)   ### The box type  plot(faithful, bty=\"n\")   ### More than one option  plot(faithful, las=1, bty=\"l\", col=\"red\", pch=19)   ### Font size of text and axes  x <- seq(0.5, 1.5, 0.25) y <- rep(1, length(x)) plot(x, y, main=\"Effect of cex on text size\") text(x, y+0.1, labels=x, cex=x)   plot(x, y, main=\"Effect of cex.main, cex.lab and cex.axis\",   cex.main=1.25, cex.lab=1.5, cex.axis=0.75)   ## Putting multiple plots on a single page  old.par <- par(mfrow=c(1, 2)) plot(faithful, main=\"Faithful eruptions\") plot(large.islands, main=\"Islands\", ylab=\"Area\")  par(old.par)   # Saving Graphics to Image Files  filename <- file.path(tempdir(), \"faithful.png\") if (FALSE) { png(filename=filename) } plot(faithful)  if (FALSE) { dev.off() }"},{"path":"/reference/ch17.html","id":null,"dir":"Reference","previous_headings":"","what":"Print examples of chapter 17 of 'R for Dummies'. — ch17","title":"Print examples of chapter 17 of 'R for Dummies'. — ch17","text":"print listing examples chapter, use ch17(). run examples ch17(), use example(ch17).","code":""},{"path":"/reference/ch17.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print examples of chapter 17 of 'R for Dummies'. — ch17","text":"","code":"ch17()"},{"path":[]},{"path":"/reference/ch17.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print examples of chapter 17 of 'R for Dummies'. — ch17","text":"","code":"# Chapter 17 - Creating Faceted Graphics with Lattice   # Creating a Lattice Plot  str(mtcars) #> 'data.frame':\t32 obs. of  11 variables: #>  $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ... #>  $ cyl : num  6 6 4 6 8 6 8 4 4 6 ... #>  $ disp: num  160 160 108 258 360 ... #>  $ hp  : num  110 110 93 110 175 105 245 62 95 123 ... #>  $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ... #>  $ wt  : num  2.62 2.88 2.32 3.21 3.44 ... #>  $ qsec: num  16.5 17 18.6 19.4 17 ... #>  $ vs  : num  0 0 1 1 0 1 0 1 1 1 ... #>  $ am  : num  1 1 1 0 0 0 0 0 0 0 ... #>  $ gear: num  4 4 4 3 3 3 3 4 4 4 ... #>  $ carb: num  4 4 1 1 2 1 4 2 2 4 ...  ## Loading the lattice package  library(\"lattice\")  ## Making a lattice scatterplot  xyplot(mpg ~ hp | factor(cyl), data=mtcars)   ## Adding trend lines  xyplot(mpg ~ hp | factor(cyl), data=mtcars,    type=c(\"p\", \"r\"))    # Changing Plot Options  ## Adding titles and labels  xyplot(mpg ~ hp | factor(cyl), data=mtcars,    type=c(\"p\", \"r\"),    main=\"Fuel economy vs. Performance\",    xlab=\"Performance (horse power)\",    ylab=\"Fuel economy (miles per gallon)\", )   xyplot(mpg ~ hp | factor(cyl), data=mtcars,    type=c(\"p\", \"r\"),    main=list(        label=\"Fuel economy vs. Performance given Number of Cylinders\",        cex=0.75) )   ## Changing the font size of titles and labels  xyplot(mpg ~ hp | factor(cyl), data=mtcars,    type=c(\"p\", \"r\"),    main=list(        label=\"Fuel economy vs. Performance given Number of Cylinders\",        cex=0.75),    xlab=list(        label=\"Performance (horse power)\",        cex=0.75),    ylab=list(        label=\"Fuel economy (miles per gallon)\",        cex=0.75),    scales=list(cex=0.5) )    ## Using themes to modify plot options  xyplot(mpg ~ hp | factor(cyl), data=mtcars,    type=c(\"p\", \"r\"),    par.settings=simpleTheme(col=\"red\", col.line=\"blue\") )    # Plotting Different Types  ## Making a bar chart  mtcars$cars <- rownames(mtcars)  barchart(cars ~ mpg | factor(cyl), data=mtcars,    main=\"barchart\",    scales=list(cex=0.5),    layout=c(3, 1) )   ## Making a box-and-whisker plot  bwplot(~ hp | factor(cyl), data=mtcars, main=\"bwplot\")    # Plotting Data in Groups  ## Using data in tall format  str(longley) #> 'data.frame':\t16 obs. of  7 variables: #>  $ GNP.deflator: num  83 88.5 88.2 89.5 96.2 ... #>  $ GNP         : num  234 259 258 285 329 ... #>  $ Unemployed  : num  236 232 368 335 210 ... #>  $ Armed.Forces: num  159 146 162 165 310 ... #>  $ Population  : num  108 109 110 111 112 ... #>  $ Year        : int  1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 ... #>  $ Employed    : num  60.3 61.1 60.2 61.2 63.2 ... library(\"reshape2\") mlongley <- melt(longley, id.vars=\"Year\")  str(mlongley) #> 'data.frame':\t96 obs. of  3 variables: #>  $ Year    : int  1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 ... #>  $ variable: Factor w/ 6 levels \"GNP.deflator\",..: 1 1 1 1 1 1 1 1 1 1 ... #>  $ value   : num  83 88.5 88.2 89.5 96.2 ...  xyplot(value ~ Year | variable, data=mlongley,    layout=c(6, 1),    par.strip.text=list(cex=0.7),    scales=list(cex=0.7) )   ## Creating a chart with groups  mtcars$cars <- rownames(mtcars) mtcars$am <- with(mtcars, ifelse(am==0, \"Automatic\", \"Manual\"))  barchart(cars ~ mpg | factor(cyl), data=mtcars,    group=am,    scales=list(cex=0.5),    layout=c(3, 1), )   ## Adding a key  barchart(cars ~ mpg | factor(cyl), data=mtcars,    main=\"barchart with groups\",    group=am,    auto.key=TRUE,    par.settings = simpleTheme(col=c(\"grey80\", \"grey20\")),    scales=list(cex=0.5),    layout=c(3, 1) )    # Printing and Saving a Lattice Plot  ## Assigning a lattice plot to an object  my.plot <- xyplot(mpg ~ hp | cyl, data=mtcars) class(my.plot) #> [1] \"trellis\"  ## Printing a lattice plot in a script  xyplot(mpg ~ hp | cyl, data=mtcars)   my.plot <- xyplot(mpg ~ hp | cyl, data=mtcars) print(my.plot)    ## Saving a lattice plot to file  filename <- file.path(tempdir(), \"xyplot\") if (FALSE) { trellis.device(device=\"png\", filename=filename) } print(my.plot)  if (FALSE) { dev.off() }"},{"path":"/reference/ch18.html","id":null,"dir":"Reference","previous_headings":"","what":"Print examples of chapter 18 of 'R for Dummies'. — ch18","title":"Print examples of chapter 18 of 'R for Dummies'. — ch18","text":"print listing examples chapter, use ch18(). run examples ch18(), use example(ch18).","code":""},{"path":"/reference/ch18.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print examples of chapter 18 of 'R for Dummies'. — ch18","text":"","code":"ch18()"},{"path":[]},{"path":"/reference/ch18.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print examples of chapter 18 of 'R for Dummies'. — ch18","text":"","code":"# Chapter 18 - Looking At ggplot2 Graphics  # Installing and Loading ggplot2  if (FALSE) { install.packages(\"ggplot2\") } library(\"ggplot2\")  # Looking At Layers  ggplot(faithful, aes(x=eruptions, y=waiting)) + geom_point() + stat_smooth() #> `geom_smooth()` using method = 'loess' and formula 'y ~ x'   # Using Geoms and Stats  ## Defining what data to use  ## Mapping data to plot aesthetics  ggplot(faithful, aes(x=eruptions, y=waiting)) + geom_point() + stat_smooth() #> `geom_smooth()` using method = 'loess' and formula 'y ~ x'   ## Getting geoms  ### Creating a bar chart  ggplot(quakes, aes(x=depth)) + geom_bar()  ggplot(quakes, aes(x=depth)) + geom_histogram(binwidth=50)   quakes.agg <- aggregate(mag ~ round(depth, -1), data=quakes, FUN=length) names(quakes.agg) <- c(\"depth\", \"mag\")  ggplot(quakes.agg, aes(x=depth, y=mag)) +    geom_bar(stat=\"identity\")    ### Making a scatterplot  ggplot(quakes, aes(x=long, y=lat)) + geom_point()    ### Creating line charts  ggplot(longley, aes(x=Year, y=Unemployed)) + geom_line()    # Sussing Stats  ## Binning data  ggplot(quakes, aes(x=depth)) + geom_bar()  ggplot(quakes, aes(x=depth)) + stat_bin(binwidth = 50)   ## Smoothing data  ggplot(longley, aes(x=Year, y=Employed)) + geom_point()   ggplot(longley, aes(x=Year, y=Employed)) +    geom_point() + stat_smooth() #> `geom_smooth()` using method = 'loess' and formula 'y ~ x'   ggplot(longley, aes(x=Year, y=Employed)) +    geom_point() + stat_smooth(method=\"lm\") #> `geom_smooth()` using formula 'y ~ x'    # Adding Facets, Scales, and Options  ## Adding facets  ggplot(mtcars, aes(x=hp, y=mpg)) + geom_point()   ggplot(mtcars, aes(x=hp, y=mpg)) + geom_point() +    stat_smooth(method=\"lm\") + facet_grid(~cyl) #> `geom_smooth()` using formula 'y ~ x'    ggplot(mtcars, aes(x=hp, y=mpg)) +    geom_point(aes(shape=factor(cyl), colour=factor(cyl)))   ggplot(mtcars, aes(x=hp, y=mpg)) +    geom_point(aes(shape=factor(cyl), colour=factor(cyl))) +    scale_shape_discrete(name=\"Cylinders\") +    scale_colour_discrete(name=\"Cylinders\")   ## Changing options  ggplot(mtcars, aes(x=hp, y=mpg)) + geom_point(color=\"red\") +    xlab(\"Performance (horse power\") +    ylab(\"Fuel consumption (mpg)\") +    ggtitle(\"Motor car comparison\")"},{"path":"/reference/ch19.html","id":null,"dir":"Reference","previous_headings":"","what":"Print examples of chapter 19 of 'R for Dummies'. — ch19","title":"Print examples of chapter 19 of 'R for Dummies'. — ch19","text":"print listing examples chapter, use ch19(). run examples ch19(), use example(ch19).","code":""},{"path":"/reference/ch19.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print examples of chapter 19 of 'R for Dummies'. — ch19","text":"","code":"ch19()"},{"path":[]},{"path":"/reference/ch19.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print examples of chapter 19 of 'R for Dummies'. — ch19","text":"","code":"# Chapter 19 - Ten Things You Can Do in R That You Would've Done in Microsoft Excel  # Adding Row and Column Totals  iris.num <- iris[, -5]  colSums(iris.num) #> Sepal.Length  Sepal.Width Petal.Length  Petal.Width  #>        876.5        458.6        563.7        179.9  colMeans(iris.num) #> Sepal.Length  Sepal.Width Petal.Length  Petal.Width  #>     5.843333     3.057333     3.758000     1.199333   apply(iris.num, 2, min) #> Sepal.Length  Sepal.Width Petal.Length  Petal.Width  #>          4.3          2.0          1.0          0.1  apply(iris.num, 2, max) #> Sepal.Length  Sepal.Width Petal.Length  Petal.Width  #>          7.9          4.4          6.9          2.5   sapply(iris.num, min) #> Sepal.Length  Sepal.Width Petal.Length  Petal.Width  #>          4.3          2.0          1.0          0.1  sapply(iris.num, max) #> Sepal.Length  Sepal.Width Petal.Length  Petal.Width  #>          7.9          4.4          6.9          2.5    # Formatting Numbers  format(12345.6789, digits=9, decimal.mark=\",\",    big.mark=\" \",small.mark=\".\", , small.interval=3) #> [1] \"12 345,678.9\"  x <- colMeans(mtcars[, 1:4]) format(x, digits=2, nsmall=2) #>      mpg      cyl     disp       hp  #> \" 20.09\" \"  6.19\" \"230.72\" \"146.69\"   x <- seq(0.5, 0.55, 0.01) sprintf(\"%.1f %%\", 100*x) #> [1] \"50.0 %\" \"51.0 %\" \"52.0 %\" \"53.0 %\" \"54.0 %\" \"55.0 %\"  set.seed(1) x <- 1000*runif(5) sprintf(\"$ %3.2f\", x) #> [1] \"$ 265.51\" \"$ 372.12\" \"$ 572.85\" \"$ 908.21\" \"$ 201.68\"  stuff <- c(\"bread\", \"cookies\") price <- c(2.1, 4) sprintf(\"%s costed $ %3.2f \", stuff, price) #> [1] \"bread costed $ 2.10 \"   \"cookies costed $ 4.00 \"   # Sorting Data  with(mtcars, mtcars[order(hp), ]) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 with(mtcars, mtcars[order(hp, decreasing=TRUE), ]) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2  # Making Choices with If  mtcars <- within(mtcars,    mpgClass <- ifelse(mpg < mean(mpg), \"Low\", \"High\"))  mtcars[mtcars$mpgClass == \"High\", ] #>                 mpg cyl  disp  hp drat    wt  qsec vs am gear carb mpgClass #> Mazda RX4      21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4     High #> Mazda RX4 Wag  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4     High #> Datsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1     High #> Hornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1     High #> Merc 240D      24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2     High #> Merc 230       22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2     High #> Fiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1     High #> Honda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2     High #> Toyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1     High #> Toyota Corona  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1     High #> Fiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1     High #> Porsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2     High #> Lotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2     High #> Volvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2     High   # Calculating Conditional Totals  with(mtcars, mean(mpg)) #> [1] 20.09062 with(mtcars, mean(mpg[hp < 150])) #> [1] 24.22353 with(mtcars, mean(mpg[hp >= 150])) #> [1] 15.40667 with(mtcars, length(mpg[hp > 150])) #> [1] 13   # Transposing Columns or Rows  x <- matrix(1:12, ncol=3) x #>      [,1] [,2] [,3] #> [1,]    1    5    9 #> [2,]    2    6   10 #> [3,]    3    7   11 #> [4,]    4    8   12 t(x) #>      [,1] [,2] [,3] [,4] #> [1,]    1    2    3    4 #> [2,]    5    6    7    8 #> [3,]    9   10   11   12  t(mtcars[1:4, ]) #>          Mazda RX4 Mazda RX4 Wag Datsun 710 Hornet 4 Drive #> mpg      \"21.0\"    \"21.0\"        \"22.8\"     \"21.4\"         #> cyl      \"6\"       \"6\"           \"4\"        \"6\"            #> disp     \"160\"     \"160\"         \"108\"      \"258\"          #> hp       \"110\"     \"110\"         \" 93\"      \"110\"          #> drat     \"3.90\"    \"3.90\"        \"3.85\"     \"3.08\"         #> wt       \"2.620\"   \"2.875\"       \"2.320\"    \"3.215\"        #> qsec     \"16.46\"   \"17.02\"       \"18.61\"    \"19.44\"        #> vs       \"0\"       \"0\"           \"1\"        \"1\"            #> am       \"1\"       \"1\"           \"1\"        \"0\"            #> gear     \"4\"       \"4\"           \"4\"        \"3\"            #> carb     \"4\"       \"4\"           \"1\"        \"1\"            #> mpgClass \"High\"    \"High\"        \"High\"     \"High\"           # Finding Unique or Duplicated Values  unique(mtcars$cyl) #> [1] 6 4 8 dupes <- duplicated(iris) head(dupes) #> [1] FALSE FALSE FALSE FALSE FALSE FALSE which(dupes) #> [1] 143 iris[dupes, ] #>     Sepal.Length Sepal.Width Petal.Length Petal.Width   Species #> 143          5.8         2.7          5.1         1.9 virginica iris[!dupes, ] #>     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species #> 1            5.1         3.5          1.4         0.2     setosa #> 2            4.9         3.0          1.4         0.2     setosa #> 3            4.7         3.2          1.3         0.2     setosa #> 4            4.6         3.1          1.5         0.2     setosa #> 5            5.0         3.6          1.4         0.2     setosa #> 6            5.4         3.9          1.7         0.4     setosa #> 7            4.6         3.4          1.4         0.3     setosa #> 8            5.0         3.4          1.5         0.2     setosa #> 9            4.4         2.9          1.4         0.2     setosa #> 10           4.9         3.1          1.5         0.1     setosa #> 11           5.4         3.7          1.5         0.2     setosa #> 12           4.8         3.4          1.6         0.2     setosa #> 13           4.8         3.0          1.4         0.1     setosa #> 14           4.3         3.0          1.1         0.1     setosa #> 15           5.8         4.0          1.2         0.2     setosa #> 16           5.7         4.4          1.5         0.4     setosa #> 17           5.4         3.9          1.3         0.4     setosa #> 18           5.1         3.5          1.4         0.3     setosa #> 19           5.7         3.8          1.7         0.3     setosa #> 20           5.1         3.8          1.5         0.3     setosa #> 21           5.4         3.4          1.7         0.2     setosa #> 22           5.1         3.7          1.5         0.4     setosa #> 23           4.6         3.6          1.0         0.2     setosa #> 24           5.1         3.3          1.7         0.5     setosa #> 25           4.8         3.4          1.9         0.2     setosa #> 26           5.0         3.0          1.6         0.2     setosa #> 27           5.0         3.4          1.6         0.4     setosa #> 28           5.2         3.5          1.5         0.2     setosa #> 29           5.2         3.4          1.4         0.2     setosa #> 30           4.7         3.2          1.6         0.2     setosa #> 31           4.8         3.1          1.6         0.2     setosa #> 32           5.4         3.4          1.5         0.4     setosa #> 33           5.2         4.1          1.5         0.1     setosa #> 34           5.5         4.2          1.4         0.2     setosa #> 35           4.9         3.1          1.5         0.2     setosa #> 36           5.0         3.2          1.2         0.2     setosa #> 37           5.5         3.5          1.3         0.2     setosa #> 38           4.9         3.6          1.4         0.1     setosa #> 39           4.4         3.0          1.3         0.2     setosa #> 40           5.1         3.4          1.5         0.2     setosa #> 41           5.0         3.5          1.3         0.3     setosa #> 42           4.5         2.3          1.3         0.3     setosa #> 43           4.4         3.2          1.3         0.2     setosa #> 44           5.0         3.5          1.6         0.6     setosa #> 45           5.1         3.8          1.9         0.4     setosa #> 46           4.8         3.0          1.4         0.3     setosa #> 47           5.1         3.8          1.6         0.2     setosa #> 48           4.6         3.2          1.4         0.2     setosa #> 49           5.3         3.7          1.5         0.2     setosa #> 50           5.0         3.3          1.4         0.2     setosa #> 51           7.0         3.2          4.7         1.4 versicolor #> 52           6.4         3.2          4.5         1.5 versicolor #> 53           6.9         3.1          4.9         1.5 versicolor #> 54           5.5         2.3          4.0         1.3 versicolor #> 55           6.5         2.8          4.6         1.5 versicolor #> 56           5.7         2.8          4.5         1.3 versicolor #> 57           6.3         3.3          4.7         1.6 versicolor #> 58           4.9         2.4          3.3         1.0 versicolor #> 59           6.6         2.9          4.6         1.3 versicolor #> 60           5.2         2.7          3.9         1.4 versicolor #> 61           5.0         2.0          3.5         1.0 versicolor #> 62           5.9         3.0          4.2         1.5 versicolor #> 63           6.0         2.2          4.0         1.0 versicolor #> 64           6.1         2.9          4.7         1.4 versicolor #> 65           5.6         2.9          3.6         1.3 versicolor #> 66           6.7         3.1          4.4         1.4 versicolor #> 67           5.6         3.0          4.5         1.5 versicolor #> 68           5.8         2.7          4.1         1.0 versicolor #> 69           6.2         2.2          4.5         1.5 versicolor #> 70           5.6         2.5          3.9         1.1 versicolor #> 71           5.9         3.2          4.8         1.8 versicolor #> 72           6.1         2.8          4.0         1.3 versicolor #> 73           6.3         2.5          4.9         1.5 versicolor #> 74           6.1         2.8          4.7         1.2 versicolor #> 75           6.4         2.9          4.3         1.3 versicolor #> 76           6.6         3.0          4.4         1.4 versicolor #> 77           6.8         2.8          4.8         1.4 versicolor #> 78           6.7         3.0          5.0         1.7 versicolor #> 79           6.0         2.9          4.5         1.5 versicolor #> 80           5.7         2.6          3.5         1.0 versicolor #> 81           5.5         2.4          3.8         1.1 versicolor #> 82           5.5         2.4          3.7         1.0 versicolor #> 83           5.8         2.7          3.9         1.2 versicolor #> 84           6.0         2.7          5.1         1.6 versicolor #> 85           5.4         3.0          4.5         1.5 versicolor #> 86           6.0         3.4          4.5         1.6 versicolor #> 87           6.7         3.1          4.7         1.5 versicolor #> 88           6.3         2.3          4.4         1.3 versicolor #> 89           5.6         3.0          4.1         1.3 versicolor #> 90           5.5         2.5          4.0         1.3 versicolor #> 91           5.5         2.6          4.4         1.2 versicolor #> 92           6.1         3.0          4.6         1.4 versicolor #> 93           5.8         2.6          4.0         1.2 versicolor #> 94           5.0         2.3          3.3         1.0 versicolor #> 95           5.6         2.7          4.2         1.3 versicolor #> 96           5.7         3.0          4.2         1.2 versicolor #> 97           5.7         2.9          4.2         1.3 versicolor #> 98           6.2         2.9          4.3         1.3 versicolor #> 99           5.1         2.5          3.0         1.1 versicolor #> 100          5.7         2.8          4.1         1.3 versicolor #> 101          6.3         3.3          6.0         2.5  virginica #> 102          5.8         2.7          5.1         1.9  virginica #> 103          7.1         3.0          5.9         2.1  virginica #> 104          6.3         2.9          5.6         1.8  virginica #> 105          6.5         3.0          5.8         2.2  virginica #> 106          7.6         3.0          6.6         2.1  virginica #> 107          4.9         2.5          4.5         1.7  virginica #> 108          7.3         2.9          6.3         1.8  virginica #> 109          6.7         2.5          5.8         1.8  virginica #> 110          7.2         3.6          6.1         2.5  virginica #> 111          6.5         3.2          5.1         2.0  virginica #> 112          6.4         2.7          5.3         1.9  virginica #> 113          6.8         3.0          5.5         2.1  virginica #> 114          5.7         2.5          5.0         2.0  virginica #> 115          5.8         2.8          5.1         2.4  virginica #> 116          6.4         3.2          5.3         2.3  virginica #> 117          6.5         3.0          5.5         1.8  virginica #> 118          7.7         3.8          6.7         2.2  virginica #> 119          7.7         2.6          6.9         2.3  virginica #> 120          6.0         2.2          5.0         1.5  virginica #> 121          6.9         3.2          5.7         2.3  virginica #> 122          5.6         2.8          4.9         2.0  virginica #> 123          7.7         2.8          6.7         2.0  virginica #> 124          6.3         2.7          4.9         1.8  virginica #> 125          6.7         3.3          5.7         2.1  virginica #> 126          7.2         3.2          6.0         1.8  virginica #> 127          6.2         2.8          4.8         1.8  virginica #> 128          6.1         3.0          4.9         1.8  virginica #> 129          6.4         2.8          5.6         2.1  virginica #> 130          7.2         3.0          5.8         1.6  virginica #> 131          7.4         2.8          6.1         1.9  virginica #> 132          7.9         3.8          6.4         2.0  virginica #> 133          6.4         2.8          5.6         2.2  virginica #> 134          6.3         2.8          5.1         1.5  virginica #> 135          6.1         2.6          5.6         1.4  virginica #> 136          7.7         3.0          6.1         2.3  virginica #> 137          6.3         3.4          5.6         2.4  virginica #> 138          6.4         3.1          5.5         1.8  virginica #> 139          6.0         3.0          4.8         1.8  virginica #> 140          6.9         3.1          5.4         2.1  virginica #> 141          6.7         3.1          5.6         2.4  virginica #> 142          6.9         3.1          5.1         2.3  virginica #> 144          6.8         3.2          5.9         2.3  virginica #> 145          6.7         3.3          5.7         2.5  virginica #> 146          6.7         3.0          5.2         2.3  virginica #> 147          6.3         2.5          5.0         1.9  virginica #> 148          6.5         3.0          5.2         2.0  virginica #> 149          6.2         3.4          5.4         2.3  virginica #> 150          5.9         3.0          5.1         1.8  virginica nrow(iris[!dupes, ]) #> [1] 149   # Working with Lookup Tables  index <- match(\"Toyota Corolla\", rownames(mtcars)) index #> [1] 20 mtcars[index, 1:4] #>                 mpg cyl disp hp #> Toyota Corolla 33.9   4 71.1 65   # Working with Pivot Tables  with(mtcars, tapply(hp, list(cyl, gear), mean)) #>          3     4     5 #> 4  97.0000  76.0 102.0 #> 6 107.5000 116.5 175.0 #> 8 194.1667    NA 299.5 aggregate(hp~cyl+gear+am, mtcars, mean) #>    cyl gear am        hp #> 1    4    3  0  97.00000 #> 2    6    3  0 107.50000 #> 3    8    3  0 194.16667 #> 4    4    4  0  78.50000 #> 5    6    4  0 123.00000 #> 6    4    4  1  75.16667 #> 7    6    4  1 110.00000 #> 8    4    5  1 102.00000 #> 9    6    5  1 175.00000 #> 10   8    5  1 299.50000   # Using the Goal Seek and Solver  sales <- function(price) { 100 - 0.5 * price } revenue <- function(price) { price * sales(price) }   par(mfrow=c(1, 2)) curve(sales, from=50, to=150, xname=\"price\", ylab=\"Sales\", main=\"Sales\") curve(revenue, from=50, to=150, xname=\"price\", ylab=\"Revenue\", main=\"Revenue\")  par(mfrow=c(1, 1))  optimize(revenue, interval=c(50, 150), maximum=TRUE) #> $maximum #> [1] 100 #>  #> $objective #> [1] 5000 #>"},{"path":"/reference/ch20.html","id":null,"dir":"Reference","previous_headings":"","what":"Print examples of chapter 20 of 'R for Dummies'. — ch20","title":"Print examples of chapter 20 of 'R for Dummies'. — ch20","text":"print listing examples chapter, use ch20(). run examples ch20(), use example(ch20).","code":""},{"path":"/reference/ch20.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print examples of chapter 20 of 'R for Dummies'. — ch20","text":"","code":"ch20()"},{"path":[]},{"path":"/reference/ch20.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print examples of chapter 20 of 'R for Dummies'. — ch20","text":"","code":"# Chapter 20 - Ten Tips on Working with Packages  ## Poking Around the Nooks and Crannies of CRAN  options(\"repos\" = c(CRAN = \"http://cran.ma.imperial.ac.uk/\"))  ## Finding Interesting Packages  ## Installing Packages  if (FALSE) { install.packages(\"fortunes\") }  ## Loading Packages  library(\"fortunes\")  ## Reading the Package Manual and Vignette  library(help=fortunes) if (FALSE) { vignette(\"fortunes\") }  ## Updating Packages  if (FALSE) { update.packages() }  ## Unloading Packages  search() #>  [1] \".GlobalEnv\"          \"package:fortunes\"    \"package:ggplot2\"     #>  [4] \"package:reshape2\"    \"package:lattice\"     \"package:sos\"         #>  [7] \"package:brew\"        \"package:stringr\"     \"package:rfordummies\" #> [10] \"package:stats\"       \"package:graphics\"    \"package:grDevices\"   #> [13] \"package:utils\"       \"package:datasets\"    \"package:methods\"     #> [16] \"Autoloads\"           \"package:base\"        detach(package:fortunes, unload=TRUE)  ## Forging Ahead with R-Forge  if (FALSE) { install.packages(\"data.table\", repos=\"http://R-Forge.R-project.org\") }  ## Conducting Installations from BioConductor  if (FALSE) { source(\"http://bioconductor.org/biocLite.R\") }  ## Reading the R Manual"},{"path":"/reference/elements.html","id":null,"dir":"Reference","previous_headings":"","what":"Periodic table of elements. — elements","title":"Periodic table of elements. — elements","text":"data set containing properties periodic table elements.","code":""},{"path":"/reference/elements.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Periodic table of elements. — elements","text":"data frame 118 rows 9 variables","code":""},{"path":"/reference/elements.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Periodic table of elements. — elements","text":"https://en.wikipedia.org/wiki/Periodic_table","code":""},{"path":"/reference/elements.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Periodic table of elements. — elements","text":"Atomic.Name Symbol Group Period Block State..STP Occurrence Description","code":""},{"path":"/reference/rfordummies.html","id":null,"dir":"Reference","previous_headings":"","what":"A package to accompany the book ","title":"A package to accompany the book ","text":"package contains code examples book 'R Dummies' (2nd edition) Andrie de Vries Joris Meys.","code":""},{"path":"/reference/rfordummies.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A package to accompany the book ","text":"print sample code every chapter: ch1() ch2() etc. print table contents: toc() save elements data frame either excel csv format, use: saveElements()","code":""},{"path":"/reference/rfordummies.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A package to accompany the book ","text":"de Vries, . , & Meys, J. (2012). R dummies. Chichester: Wiley. https://rfordummies.com/, ISBN-13: 978-1119962847.","code":""},{"path":"/reference/saveElements.html","id":null,"dir":"Reference","previous_headings":"","what":"Saves a copy of the periodic table of elements as excel or csv file. — saveElements","title":"Saves a copy of the periodic table of elements as excel or csv file. — saveElements","text":"Saves copy periodic table elements excel csv file.","code":""},{"path":"/reference/saveElements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Saves a copy of the periodic table of elements as excel or csv file. — saveElements","text":"","code":"saveElements(outfile, type = c(\"csv\"))"},{"path":"/reference/saveElements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Saves a copy of the periodic table of elements as excel or csv file. — saveElements","text":"outfile File name type Either excel csv","code":""},{"path":"/reference/saveElements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Saves a copy of the periodic table of elements as excel or csv file. — saveElements","text":"","code":"saveElements(file.path(tempdir(), \"elements.xlsx\")) saveElements(file.path(tempdir(), \"elements.csv\"), type = \"csv\") list.files(tempdir(), pattern = \"xlsx|csv\", full.names = TRUE) #> [1] \"/tmp/Rtmp1ZL64K/elements.csv\"  \"/tmp/Rtmp1ZL64K/elements.xlsx\""},{"path":"/reference/toc.html","id":null,"dir":"Reference","previous_headings":"","what":"Print table of contents. — toc","title":"Print table of contents. — toc","text":"Print table contents.","code":""},{"path":"/reference/toc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print table of contents. — toc","text":"","code":"toc()"},{"path":"/reference/toc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print table of contents. — toc","text":"","code":"toc() #> Introduction 1 #>  #> Part I: R You Ready? 7 #>  #> Chapter 1: Introducing R: The Big Picture 9 #>  #> Chapter 2: Exploring R 15 #>  #> Chapter 3: The Fundamentals of R 31 #>  #> Part II: Getting Down to Work in R 43 #>  #> Chapter 4: Getting Started with Arithmetic 45 #>  #> Chapter 5: Getting Started with Reading and Writing 71 #>  #> Chapter 6: Going on a Date with R 93 #>  #> Chapter 7: Working in More Dimensions 103 #>  #> Part III: Coding in R 137 #>  #> Chapter 8: Putting the Fun in Functions 139 #>  #> Chapter 9: Controlling the Logical Flow 159 #>  #> Chapter 10: Debugging Your Code 179 #>  #> Chapter 11: Getting Help 193 #>  #> Part IV: Making the Data Talk 203 #>  #> Chapter 12: Getting Data into and out of R 205 #>  #> Chapter 13: Manipulating and Processing Data 219 #>  #> Chapter 14: Summarizing Data 253 #>  #> Chapter 15: Testing Differences and Relations 275 #>  #> Part V: Working with Graphics 299 #>  #> Chapter 16: Using Base Graphics 301 #>  #> Chapter 17: Creating Faceted Graphics with Lattice 317 #>  #> Chapter 18: Looking At ggplot2 Graphics 333 #>  #> Part VI: The Part of Tens 347 #>  #> Chapter 19: Ten Things You Can Do in R That You Would've Done in Microsoft Excel 349 #>  #> Chapter 20: Ten Tips on Working with Packages 359 #>  #> Appendix: Installing R and RStudio 365 #>  #> Index 371"},{"path":"/news/index.html","id":"rfordummies-0159000","dir":"Changelog","previous_headings":"","what":"rfordummies 0.1.5.9000","title":"rfordummies 0.1.5.9000","text":"Remove references XLConnect remove rJava dependency","code":""},{"path":"/news/index.html","id":"rfordummies-015","dir":"Changelog","previous_headings":"","what":"rfordummies 0.1.5","title":"rfordummies 0.1.5","text":"CRAN release: 2020-09-19 Updated unit tests comply testthat_3.0.0","code":""},{"path":"/news/index.html","id":"rfordummies-014","dir":"Changelog","previous_headings":"","what":"rfordummies 0.1.4","title":"rfordummies 0.1.4","text":"CRAN release: 2019-03-19 Fixed issue caused CRAN archive package Add pkgdown Added NEWS.md file track changes package.","code":""},{"path":"/news/index.html","id":"rfordummies-v013","dir":"Changelog","previous_headings":"","what":"rfordummies v0.1.3","title":"rfordummies v0.1.3","text":"CRAN release: 2016-12-05 Released CRAN 2016-12-05","code":""}]
